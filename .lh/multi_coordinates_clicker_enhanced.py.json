{
    "sourceFile": "multi_coordinates_clicker_enhanced.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1749308772268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749308803604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -705,8 +705,144 @@\n             self.quick_y_var.set(\"\")\r\n             self.quick_enter_var.set(False)\r\n             self.quick_delay_var.set(\"\")\r\n     \r\n+    def move_coordinate_up(self):\r\n+        \"\"\"Move selected coordinate up in the list\"\"\"\r\n+        selection = self.coords_tree.selection()\r\n+        if not selection:\r\n+            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to move.\")\r\n+            return\r\n+        \r\n+        index = self.coords_tree.index(selection[0])\r\n+        if index == 0:\r\n+            messagebox.showinfo(\"Cannot Move\", \"This coordinate is already at the top.\")\r\n+            return\r\n+        \r\n+        # Swap coordinates\r\n+        self.coordinates[index], self.coordinates[index-1] = self.coordinates[index-1], self.coordinates[index]\r\n+        self.populate_coordinates()\r\n+        self.save_coordinates()\r\n+        \r\n+        # Re-select the moved coordinate\r\n+        children = self.coords_tree.get_children()\r\n+        if index-1 < len(children):\r\n+            self.coords_tree.selection_set(children[index-1])\r\n+            self.coords_tree.focus(children[index-1])\r\n+        \r\n+        self.update_status(f\"✅ Moved '{self.coordinates[index-1]['name']}' up\", \"success\")\r\n+        self.log_message(f\"Moved coordinate up: {self.coordinates[index-1]['name']}\", \"INFO\")\r\n+    \r\n+    def move_coordinate_down(self):\r\n+        \"\"\"Move selected coordinate down in the list\"\"\"\r\n+        selection = self.coords_tree.selection()\r\n+        if not selection:\r\n+            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to move.\")\r\n+            return\r\n+        \r\n+        index = self.coords_tree.index(selection[0])\r\n+        if index == len(self.coordinates) - 1:\r\n+            messagebox.showinfo(\"Cannot Move\", \"This coordinate is already at the bottom.\")\r\n+            return\r\n+        \r\n+        # Swap coordinates\r\n+        self.coordinates[index], self.coordinates[index+1] = self.coordinates[index+1], self.coordinates[index]\r\n+        self.populate_coordinates()\r\n+        self.save_coordinates()\r\n+        \r\n+        # Re-select the moved coordinate\r\n+        children = self.coords_tree.get_children()\r\n+        if index+1 < len(children):\r\n+            self.coords_tree.selection_set(children[index+1])\r\n+            self.coords_tree.focus(children[index+1])\r\n+        \r\n+        self.update_status(f\"✅ Moved '{self.coordinates[index+1]['name']}' down\", \"success\")\r\n+        self.log_message(f\"Moved coordinate down: {self.coordinates[index+1]['name']}\", \"INFO\")\r\n+    \r\n+    def show_order_dialog(self):\r\n+        \"\"\"Show dialog to manually set coordinate order\"\"\"\r\n+        dialog = tk.Toplevel(self.root)\r\n+        dialog.title(\"Reorder Coordinates\")\r\n+        dialog.geometry(\"500x400\")\r\n+        dialog.transient(self.root)\r\n+        dialog.grab_set()\r\n+        dialog.configure(bg=COLORS['light'])\r\n+        \r\n+        # Center dialog\r\n+        dialog.update_idletasks()\r\n+        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)\r\n+        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)\r\n+        dialog.geometry(f\"+{x}+{y}\")\r\n+        \r\n+        # Header\r\n+        header_frame = tk.Frame(dialog, bg=COLORS['primary'], height=60)\r\n+        header_frame.pack(fill='x', pady=(0, 10))\r\n+        header_frame.pack_propagate(False)\r\n+        tk.Label(header_frame, text=\"🔢 Reorder Coordinates\", font=(\"Segoe UI\", 16, \"bold\"),\r\n+                bg=COLORS['primary'], fg=COLORS['text_on_primary']).pack(expand=True)\r\n+        \r\n+        # Instructions\r\n+        tk.Label(dialog, text=\"Drag and drop or use buttons to reorder:\", \r\n+                bg=COLORS['light'], fg=COLORS['dark'], font=(\"Segoe UI\", 10)).pack(pady=5)\r\n+        \r\n+        # Listbox for reordering\r\n+        list_frame = tk.Frame(dialog, bg=COLORS['light'])\r\n+        list_frame.pack(fill='both', expand=True, padx=20, pady=10)\r\n+        \r\n+        order_listbox = tk.Listbox(list_frame, font=(\"Segoe UI\", 10), height=12,\r\n+                                  bg='white', fg=COLORS['dark'], selectbackground=COLORS['info'])\r\n+        order_listbox.pack(side='left', fill='both', expand=True)\r\n+        \r\n+        order_scrollbar = ttk.Scrollbar(list_frame, orient=\"vertical\", command=order_listbox.yview)\r\n+        order_scrollbar.pack(side='right', fill='y')\r\n+        order_listbox.configure(yscrollcommand=order_scrollbar.set)\r\n+        \r\n+        # Populate listbox\r\n+        for i, coord in enumerate(self.coordinates):\r\n+            order_listbox.insert(tk.END, f\"{i+1}. {coord['name']} ({coord['x']}, {coord['y']})\")\r\n+        \r\n+        # Buttons for moving\r\n+        button_frame = tk.Frame(dialog, bg=COLORS['light'])\r\n+        button_frame.pack(pady=10)\r\n+        \r\n+        def move_up():\r\n+            try:\r\n+                index = order_listbox.curselection()[0]\r\n+                if index > 0:\r\n+                    # Swap in list and coordinates\r\n+                    order_listbox.insert(index-1, order_listbox.get(index))\r\n+                    order_listbox.delete(index+1)\r\n+                    order_listbox.selection_set(index-1)\r\n+                    \r\n+                    self.coordinates[index], self.coordinates[index-1] = self.coordinates[index-1], self.coordinates[index]\r\n+            except IndexError:\r\n+                messagebox.showwarning(\"No Selection\", \"Please select an item to move.\")\r\n+        \r\n+        def move_down():\r\n+            try:\r\n+                index = order_listbox.curselection()[0]\r\n+                if index < order_listbox.size() - 1:\r\n+                    # Swap in list and coordinates\r\n+                    order_listbox.insert(index+2, order_listbox.get(index))\r\n+                    order_listbox.delete(index)\r\n+                    order_listbox.selection_set(index+1)\r\n+                    \r\n+                    self.coordinates[index], self.coordinates[index+1] = self.coordinates[index+1], self.coordinates[index]\r\n+            except IndexError:\r\n+                messagebox.showwarning(\"No Selection\", \"Please select an item to move.\")\r\n+        \r\n+        def save_order():\r\n+            self.populate_coordinates()\r\n+            self.save_coordinates()\r\n+            self.update_status(\"✅ Coordinate order saved\", \"success\")\r\n+            self.log_message(\"Coordinate order updated\", \"INFO\")\r\n+            dialog.destroy()\r\n+        \r\n+        ttk.Button(button_frame, text=\"⬆️ Move Up\", command=move_up, style='Info.TButton').pack(side='left', padx=5)\r\n+        ttk.Button(button_frame, text=\"⬇️ Move Down\", command=move_down, style='Info.TButton').pack(side='left', padx=5)\r\n+        ttk.Button(button_frame, text=\"💾 Save Order\", command=save_order, style='Success.TButton').pack(side='left', padx=5)\r\n+        ttk.Button(button_frame, text=\"❌ Cancel\", command=dialog.destroy, style='Danger.TButton').pack(side='left', padx=5)\r\n+    \r\n     def update_selected_coordinate(self):\r\n         \"\"\"Update the selected coordinate with quick settings values\"\"\"\r\n         selection = self.coords_tree.selection()\r\n         if not selection:\r\n"
                },
                {
                    "date": 1749308820022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -420,19 +420,30 @@\n             self.log_message(\"Auto-refresh enabled\", \"INFO\")\r\n     \r\n     def populate_coordinates(self):\r\n         \"\"\"Populate main coordinates tree\"\"\"\r\n+        # Clear existing items\r\n         for item in self.coords_tree.get_children():\r\n             self.coords_tree.delete(item)\r\n         \r\n-        self.coords_tree.tag_configure('black_text', foreground='black')\r\n+        # Configure tag for proper text display\r\n+        self.coords_tree.tag_configure('coordinate_row', foreground='#000000', font=('Segoe UI', 10))\r\n         \r\n-        for coord in self.coordinates:\r\n+        # Add coordinates with proper formatting\r\n+        for i, coord in enumerate(self.coordinates):\r\n+            # Ensure all values are properly formatted\r\n+            name = str(coord.get(\"name\", f\"Position {i+1}\"))[:15]  # Limit name length\r\n+            x_val = str(coord.get(\"x\", 0))\r\n+            y_val = str(coord.get(\"y\", 0))\r\n+            enter_val = \"Yes\" if coord.get(\"press_enter_after_paste\", False) else \"No\"\r\n+            delay_val = f\"{coord.get('delay_after_action', 1.0):.1f}s\"\r\n+            \r\n             self.coords_tree.insert(\"\", \"end\", values=(\r\n-                coord[\"name\"], coord[\"x\"], coord[\"y\"],\r\n-                \"Yes\" if coord[\"press_enter_after_paste\"] else \"No\",\r\n-                f\"{coord['delay_after_action']}s\"\r\n-            ), tags=('black_text',))\r\n+                name, x_val, y_val, enter_val, delay_val\r\n+            ), tags=('coordinate_row',))\r\n+        \r\n+        # Force refresh\r\n+        self.coords_tree.update_idletasks()\r\n     \r\n     def populate_editor(self):\r\n         \"\"\"Populate editor tree\"\"\"\r\n         for item in self.editor_tree.get_children():\r\n"
                },
                {
                    "date": 1749308838953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -902,23 +902,41 @@\n     def refresh_clipboard(self):\r\n         \"\"\"Refresh clipboard display\"\"\"\r\n         try:\r\n             clipboard_content = pyperclip.paste()\r\n+            \r\n+            # Skip if clipboard contains JSON (likely from our own config)\r\n+            if clipboard_content.strip().startswith('{') or clipboard_content.strip().startswith('['):\r\n+                try:\r\n+                    import json\r\n+                    json.loads(clipboard_content)\r\n+                    # If it's valid JSON, probably our config - get real clipboard\r\n+                    clipboard_content = \"No text in clipboard (contains data/JSON)\"\r\n+                except:\r\n+                    pass  # Not JSON, continue normally\r\n+            \r\n             self.clipboard_text.config(state='normal')\r\n             self.clipboard_text.delete(1.0, tk.END)\r\n             \r\n             # Add timestamp and content\r\n             import datetime\r\n             timestamp = datetime.datetime.now().strftime(\"%H:%M:%S\")\r\n             header = f\"🕒 Last updated: {timestamp}\\n\" + \"=\"*50 + \"\\n\"\r\n             \r\n-            self.clipboard_text.insert(1.0, header + clipboard_content)\r\n-            # Ensure text is black\r\n+            # Limit clipboard content length for display\r\n+            display_content = clipboard_content\r\n+            if len(display_content) > 1000:\r\n+                display_content = display_content[:1000] + \"\\n... (content truncated)\"\r\n+            \r\n+            self.clipboard_text.insert(1.0, header + display_content)\r\n+            \r\n+            # Configure proper text styling\r\n             self.clipboard_text.tag_add(\"black_text\", \"1.0\", tk.END)\r\n+            self.clipboard_text.tag_configure(\"black_text\", foreground=\"#000000\", font=(\"Cascadia Code\", 11))\r\n             self.clipboard_text.config(state='disabled', fg='#000000')\r\n             \r\n             # Show success message briefly\r\n-            self.update_status(\"✅ Clipboard refreshed automatically\", \"success\")\r\n+            self.update_status(\"✅ Clipboard refreshed\", \"success\")\r\n             self.log_message(f\"Clipboard refreshed - {len(clipboard_content)} characters\", \"INFO\")\r\n         except Exception as e:\r\n             self.update_status(f\"❌ Clipboard Error: {str(e)}\", \"error\")\r\n             self.log_message(f\"Clipboard refresh error: {str(e)}\", \"ERROR\")\r\n"
                },
                {
                    "date": 1749308853801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,11 +221,23 @@\n         # Treeview with inline editing\r\n         columns = (\"Name\", \"X\", \"Y\", \"Press Enter\", \"Delay\")\r\n         self.coords_tree = ttk.Treeview(right_frame, columns=columns, show=\"headings\", height=12, style='Modern.Treeview')\r\n         \r\n+        # Configure column widths and alignment\r\n+        column_configs = {\r\n+            \"Name\": {\"width\": 140, \"anchor\": \"w\"},\r\n+            \"X\": {\"width\": 80, \"anchor\": \"center\"},\r\n+            \"Y\": {\"width\": 80, \"anchor\": \"center\"},\r\n+            \"Press Enter\": {\"width\": 90, \"anchor\": \"center\"},\r\n+            \"Delay\": {\"width\": 70, \"anchor\": \"center\"}\r\n+        }\r\n+        \r\n         for col in columns:\r\n             self.coords_tree.heading(col, text=col)\r\n-            self.coords_tree.column(col, width=120, anchor=\"center\")\r\n+            self.coords_tree.column(col, \r\n+                                   width=column_configs[col][\"width\"], \r\n+                                   anchor=column_configs[col][\"anchor\"],\r\n+                                   minwidth=50)\r\n         \r\n         self.coords_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\r\n         \r\n         tree_scrollbar = ttk.Scrollbar(right_frame, orient=\"vertical\", command=self.coords_tree.yview)\r\n"
                },
                {
                    "date": 1749310555839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,11 +60,16 @@\n             pass\r\n         \r\n         # Default coordinates\r\n         return [\r\n-            {\"name\": \"Position 1\", \"x\": 100, \"y\": 200, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n-            {\"name\": \"Position 2\", \"x\": 300, \"y\": 400, \"press_enter_after_paste\": False, \"delay_after_action\": 1.5},\r\n-            {\"name\": \"Position 3\", \"x\": 500, \"y\": 300, \"press_enter_after_paste\": True, \"delay_after_action\": 2.0}\r\n+            {\"name\": \"Position 1\", \"x\": -2658, \"y\": 934, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n+            {\"name\": \"Position 2\", \"x\": -2002, \"y\": 985, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n+            {\"name\": \"Position 3\", \"x\": -2644, \"y\": 1763, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n+            {\"name\": \"Position 4\", \"x\": -1708, \"y\": 1664, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n+            {\"name\": \"Position 5\", \"x\": -1050, \"y\": 1721, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n+            {\"name\": \"Position 6\", \"x\": -720, \"y\": 1040, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n+            {\"name\": \"Position 7\", \"x\": -814, \"y\": 1699, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n+            {\"name\": \"Position 8\", \"x\": -75, \"y\": 1766, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0}\r\n         ]\r\n     \r\n     def save_coordinates(self):\r\n         \"\"\"Save coordinates to config file\"\"\"\r\n"
                },
                {
                    "date": 1749312561033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -938,12 +938,10 @@\n             import datetime\r\n             timestamp = datetime.datetime.now().strftime(\"%H:%M:%S\")\r\n             header = f\"🕒 Last updated: {timestamp}\\n\" + \"=\"*50 + \"\\n\"\r\n             \r\n-            # Limit clipboard content length for display\r\n+            # Show full clipboard content (no truncation)\r\n             display_content = clipboard_content\r\n-            if len(display_content) > 1000:\r\n-                display_content = display_content[:1000] + \"\\n... (content truncated)\"\r\n             \r\n             self.clipboard_text.insert(1.0, header + display_content)\r\n             \r\n             # Configure proper text styling\r\n"
                },
                {
                    "date": 1749631582502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1103 +1,1238 @@\n-import tkinter as tk\r\n-from tkinter import ttk, messagebox\r\n-import pyautogui\r\n-import pyperclip\r\n-import time\r\n-import threading\r\n-import json\r\n-import os\r\n-\r\n-# Global color scheme - Modern dark theme with good contrast\r\n-COLORS = {\r\n-    'primary': '#2C3E50',      # Dark blue-gray for headers\r\n-    'secondary': '#34495E',    # Slightly lighter for secondary elements\r\n-    'success': '#27AE60',      # Green for success actions\r\n-    'danger': '#E74C3C',       # Red for danger actions\r\n-    'warning': '#F39C12',      # Orange for warnings\r\n-    'info': '#3498DB',         # Blue for info\r\n-    'light': '#ECF0F1',        # Light gray for backgrounds\r\n-    'dark': '#000000',         # Dark for text\r\n-    'accent': '#16A085',       # Teal for accents\r\n-    'bg': '#FFFFFF',           # White background\r\n-    'text': '#000000',         # Dark text for contrast\r\n-    'text_on_primary': '#FFFFFF' # White text for use on dark backgrounds like primary color\r\n-}\r\n-\r\n-class MultiCoordinatesClicker:\r\n-    def __init__(self, root):\r\n-        self.root = root\r\n-        self.root.title(\"🚀 Multi Coordinates Clicker - Enhanced\")\r\n-        self.root.geometry(\"1800x700\")\r\n-        self.root.resizable(True, True)\r\n-        \r\n-        # Configure modern styling\r\n-        self.setup_modern_style()\r\n-        self.root.configure(bg=COLORS['light'])\r\n-        \r\n-        # Initialize variables\r\n-        self.is_running = False\r\n-        self.current_thread = None\r\n-        self.start_time = None\r\n-        self.completed_count = 0\r\n-        self.auto_refresh_enabled = True\r\n-        self.clipboard_refresh_timer = None\r\n-        \r\n-        # Load or create default coordinates\r\n-        self.coordinates = self.load_coordinates()\r\n-        \r\n-        self.setup_ui()\r\n-        \r\n-        # Start auto-refresh clipboard\r\n-        self.start_auto_refresh()\r\n-        \r\n-    def load_coordinates(self):\r\n-        \"\"\"Load coordinates from config file or create defaults\"\"\"\r\n-        try:\r\n-            if os.path.exists('coordinates_config.json'):\r\n-                with open('coordinates_config.json', 'r') as f:\r\n-                    return json.load(f)\r\n-        except:\r\n-            pass\r\n-        \r\n-        # Default coordinates\r\n-        return [\r\n-            {\"name\": \"Position 1\", \"x\": -2658, \"y\": 934, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n-            {\"name\": \"Position 2\", \"x\": -2002, \"y\": 985, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n-            {\"name\": \"Position 3\", \"x\": -2644, \"y\": 1763, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n-            {\"name\": \"Position 4\", \"x\": -1708, \"y\": 1664, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n-            {\"name\": \"Position 5\", \"x\": -1050, \"y\": 1721, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n-            {\"name\": \"Position 6\", \"x\": -720, \"y\": 1040, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n-            {\"name\": \"Position 7\", \"x\": -814, \"y\": 1699, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n-            {\"name\": \"Position 8\", \"x\": -75, \"y\": 1766, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0}\r\n-        ]\r\n-    \r\n-    def save_coordinates(self):\r\n-        \"\"\"Save coordinates to config file\"\"\"\r\n-        try:\r\n-            with open('coordinates_config.json', 'w') as f:\r\n-                json.dump(self.coordinates, f, indent=2)\r\n-        except Exception as e:\r\n-            messagebox.showerror(\"Save Error\", f\"Could not save coordinates: {str(e)}\")\r\n-    \r\n-    def setup_modern_style(self):\r\n-        \"\"\"Configure modern visual styling\"\"\"\r\n-        style = ttk.Style()\r\n-        \r\n-        # Configure notebook with better contrast\r\n-        style.configure('Modern.TNotebook', background=COLORS['light'], borderwidth=0)\r\n-        style.configure('Modern.TNotebook.Tab', padding=[20, 12], font=('Segoe UI', 11, 'bold'),\r\n-                       background=COLORS['light'], foreground=COLORS['dark'])\r\n-        style.map('Modern.TNotebook.Tab', \r\n-                 background=[('selected', COLORS['info'])],\r\n-                 foreground=[('selected', COLORS['dark'])])\r\n-        \r\n-        # Configure buttons with proper contrast - ensuring all text is dark/black\r\n-        style.configure('Success.TButton', font=('Segoe UI', 14, 'bold'), padding=[25, 15],\r\n-                       background=COLORS['success'], foreground=COLORS['dark'], borderwidth=2, relief='raised')\r\n-        style.configure('Danger.TButton', font=('Segoe UI', 12, 'bold'), padding=[20, 10],\r\n-                       background=COLORS['danger'], foreground=COLORS['dark'], borderwidth=2, relief='raised')\r\n-        style.configure('Primary.TButton', font=('Segoe UI', 12, 'bold'), padding=[20, 10],\r\n-                       background=COLORS['primary'], foreground=COLORS['dark'], borderwidth=2, relief='raised')\r\n-        style.configure('Info.TButton', font=('Segoe UI', 12, 'bold'), padding=[20, 10],\r\n-                       background=COLORS['info'], foreground=COLORS['dark'], borderwidth=2, relief='raised')\r\n-        \r\n-        # Map button states for better interaction feedback\r\n-        for btn_style in ['Success.TButton', 'Danger.TButton', 'Primary.TButton', 'Info.TButton']:\r\n-            style.map(btn_style,\r\n-                     relief=[('pressed', 'sunken'), ('active', 'raised')],\r\n-                     background=[('active', COLORS['accent'])],\r\n-                     foreground=[('active', COLORS['dark'])])\r\n-        \r\n-        # Configure treeview with readable colors\r\n-        style.configure('Modern.Treeview', background=COLORS['bg'], foreground=COLORS['dark'],\r\n-                       font=('Segoe UI', 10), fieldbackground=COLORS['bg'], borderwidth=1)\r\n-        style.configure('Modern.Treeview.Heading', background=COLORS['light'], foreground=COLORS['dark'],\r\n-                       font=('Segoe UI', 11, 'bold'), relief='raised', borderwidth=1)\r\n-        \r\n-        # Configure entry and other widgets\r\n-        style.configure('TEntry', fieldbackground='white', borderwidth=2, relief='solid', foreground=COLORS['dark'])\r\n-        style.configure('TLabelframe', background=COLORS['light'], foreground=COLORS['dark'],\r\n-                       borderwidth=2, relief='solid')\r\n-        style.configure('TLabelframe.Label', background=COLORS['light'], foreground=COLORS['dark'],\r\n-                       font=('Segoe UI', 11, 'bold'))\r\n-    \r\n-    def setup_ui(self):\r\n-        \"\"\"Set up the user interface\"\"\"\r\n-        # Configure root grid\r\n-        self.root.columnconfigure(0, weight=1)\r\n-        self.root.rowconfigure(0, weight=1)\r\n-        \r\n-        # Main notebook\r\n-        self.notebook = ttk.Notebook(self.root, style='Modern.TNotebook')\r\n-        self.notebook.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=15, pady=15)\r\n-        \r\n-        # Create tabs\r\n-        self.setup_main_tab()\r\n-        self.setup_settings_tab()\r\n-        self.setup_logs_tab()\r\n-        \r\n-        # Initialize clipboard after all tabs are created\r\n-        self.refresh_clipboard()\r\n-    \r\n-    def setup_main_tab(self):\r\n-        \"\"\"Set up the main control tab\"\"\"\r\n-        main_tab = ttk.Frame(self.notebook)\r\n-        self.notebook.add(main_tab, text=\"🎯 Main Control\")\r\n-        main_tab.columnconfigure(0, weight=1)\r\n-        main_tab.columnconfigure(1, weight=1)\r\n-        main_tab.rowconfigure(1, weight=1)\r\n-        \r\n-        # Title with better contrast\r\n-        title_frame = tk.Frame(main_tab, bg=COLORS['primary'], height=80)\r\n-        title_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))\r\n-        title_frame.grid_propagate(False)\r\n-        title_frame.columnconfigure(0, weight=1)\r\n-        \r\n-        tk.Label(title_frame, text=\"🚀 Multi Coordinates Clicker - Enhanced\", \r\n-                font=(\"Segoe UI\", 22, \"bold\"), bg=COLORS['primary'], fg=COLORS['text_on_primary']).grid(row=0, column=0, pady=10)\r\n-        tk.Label(title_frame, text=\"✨ Automated clipboard pasting with adjustable settings ✨\",\r\n-                font=(\"Segoe UI\", 12), bg=COLORS['primary'], fg=COLORS['text_on_primary']).grid(row=1, column=0)\r\n-        \r\n-        # Left panel\r\n-        left_frame = ttk.LabelFrame(main_tab, text=\"📋 Clipboard & Control\", padding=\"15\")\r\n-        left_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(15, 8), pady=5)\r\n-        left_frame.columnconfigure(0, weight=1)\r\n-        left_frame.rowconfigure(1, weight=1)\r\n-        \r\n-        # Clipboard\r\n-        clipboard_header = tk.Frame(left_frame, bg=COLORS['info'], height=35)\r\n-        clipboard_header.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))\r\n-        clipboard_header.grid_propagate(False)\r\n-        tk.Label(clipboard_header, text=\"📝 Current Clipboard Content\", \r\n-                font=(\"Segoe UI\", 12, \"bold\"), background=COLORS['info'], foreground=COLORS['dark']).grid(row=0, column=0, padx=10, pady=5)\r\n-        \r\n-        self.clipboard_text = tk.Text(left_frame, height=8, wrap=tk.WORD, font=(\"Cascadia Code\", 11),\r\n-                                     bg=COLORS['bg'], fg=COLORS['dark'], relief='flat', borderwidth=2,\r\n-                                     insertbackground=COLORS['dark'], selectbackground=COLORS['info'], selectforeground=COLORS['dark'])\r\n-        self.clipboard_text.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)\r\n-        \r\n-        # Configure black text tag for clipboard\r\n-        self.clipboard_text.tag_configure(\"black_text\", foreground=\"#000000\", font=(\"Cascadia Code\", 11))\r\n-        \r\n-        scrollbar = ttk.Scrollbar(left_frame, orient=\"vertical\", command=self.clipboard_text.yview)\r\n-        scrollbar.grid(row=1, column=1, sticky=(tk.N, tk.S))\r\n-        self.clipboard_text.configure(yscrollcommand=scrollbar.set)\r\n-        \r\n-        # Control buttons with better styling\r\n-        control_frame = tk.Frame(left_frame, bg=COLORS['light'])\r\n-        control_frame.grid(row=2, column=0, columnspan=2, pady=15, sticky=(tk.W, tk.E))\r\n-        control_frame.columnconfigure(0, weight=1)\r\n-        control_frame.columnconfigure(1, weight=1)\r\n-        control_frame.columnconfigure(2, weight=1)\r\n-        \r\n-        # First row of buttons\r\n-        ttk.Button(control_frame, text=\"🔄 Refresh Now\", command=self.refresh_clipboard, style='Info.TButton').grid(row=0, column=0, padx=3, pady=3, sticky=(tk.W, tk.E))\r\n-        self.auto_refresh_btn = ttk.Button(control_frame, text=\"⏰ Auto-Refresh: ON\", command=self.toggle_auto_refresh, style='Info.TButton')\r\n-        self.auto_refresh_btn.grid(row=0, column=1, padx=3, pady=3, sticky=(tk.W, tk.E))\r\n-        \r\n-        # Second row of buttons\r\n-        self.submit_btn = ttk.Button(control_frame, text=\"🚀 START SEQUENCE\", command=self.submit_action, style=\"Success.TButton\")\r\n-        self.submit_btn.grid(row=1, column=0, columnspan=2, padx=3, pady=3, sticky=(tk.W, tk.E))\r\n-        self.stop_btn = ttk.Button(control_frame, text=\"🛑 STOP\", command=self.stop_action, style=\"Danger.TButton\", state=\"disabled\")\r\n-        self.stop_btn.grid(row=1, column=2, padx=3, pady=3, sticky=(tk.W, tk.E))\r\n-        \r\n-        # Status\r\n-        status_frame = tk.Frame(left_frame, bg=COLORS['light'])\r\n-        status_frame.grid(row=3, column=0, columnspan=2, pady=15, sticky=(tk.W, tk.E))\r\n-        status_frame.columnconfigure(0, weight=1)\r\n-        \r\n-        self.status_container = tk.Frame(status_frame, bg=COLORS['success'], relief='solid', bd=2)\r\n-        self.status_container.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))\r\n-        self.status_container.columnconfigure(0, weight=1)\r\n-        \r\n-        self.status_label = tk.Label(self.status_container, text=\"✅ Ready - Click START SEQUENCE to begin\", \r\n-                                    bg=COLORS['success'], fg=COLORS['dark'], font=(\"Segoe UI\", 11, \"bold\"), pady=8)\r\n-        self.status_label.grid(row=0, column=0, sticky=(tk.W, tk.E))\r\n-        \r\n-        self.progress = ttk.Progressbar(status_frame, mode='determinate')\r\n-        self.progress.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=3)\r\n-        \r\n-        # Right panel\r\n-        right_frame = ttk.LabelFrame(main_tab, text=\"🎯 Configured Coordinates\", padding=\"15\")\r\n-        right_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(8, 15), pady=5)\r\n-        right_frame.columnconfigure(0, weight=1)\r\n-        right_frame.rowconfigure(0, weight=1)\r\n-        \r\n-        # Treeview with inline editing\r\n-        columns = (\"Name\", \"X\", \"Y\", \"Press Enter\", \"Delay\")\r\n-        self.coords_tree = ttk.Treeview(right_frame, columns=columns, show=\"headings\", height=12, style='Modern.Treeview')\r\n-        \r\n-        # Configure column widths and alignment\r\n-        column_configs = {\r\n-            \"Name\": {\"width\": 140, \"anchor\": \"w\"},\r\n-            \"X\": {\"width\": 80, \"anchor\": \"center\"},\r\n-            \"Y\": {\"width\": 80, \"anchor\": \"center\"},\r\n-            \"Press Enter\": {\"width\": 90, \"anchor\": \"center\"},\r\n-            \"Delay\": {\"width\": 70, \"anchor\": \"center\"}\r\n-        }\r\n-        \r\n-        for col in columns:\r\n-            self.coords_tree.heading(col, text=col)\r\n-            self.coords_tree.column(col, \r\n-                                   width=column_configs[col][\"width\"], \r\n-                                   anchor=column_configs[col][\"anchor\"],\r\n-                                   minwidth=50)\r\n-        \r\n-        self.coords_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\r\n-        \r\n-        tree_scrollbar = ttk.Scrollbar(right_frame, orient=\"vertical\", command=self.coords_tree.yview)\r\n-        tree_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))\r\n-        self.coords_tree.configure(yscrollcommand=tree_scrollbar.set)\r\n-        \r\n-        # Quick edit buttons\r\n-        edit_buttons_frame = tk.Frame(right_frame, bg=COLORS['light'])\r\n-        edit_buttons_frame.grid(row=1, column=0, columnspan=2, pady=10, sticky=(tk.W, tk.E))\r\n-        edit_buttons_frame.columnconfigure(0, weight=1)\r\n-        edit_buttons_frame.columnconfigure(1, weight=1)\r\n-        edit_buttons_frame.columnconfigure(2, weight=1)\r\n-        edit_buttons_frame.columnconfigure(3, weight=1)\r\n-        edit_buttons_frame.columnconfigure(4, weight=1)\r\n-        edit_buttons_frame.columnconfigure(5, weight=1)\r\n-        \r\n-        # First row - basic operations\r\n-        ttk.Button(edit_buttons_frame, text=\"➕ Add\", command=self.quick_add_coordinate, style='Primary.TButton').grid(row=0, column=0, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n-        ttk.Button(edit_buttons_frame, text=\"✏️ Edit\", command=self.quick_edit_coordinate, style='Primary.TButton').grid(row=0, column=1, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n-        ttk.Button(edit_buttons_frame, text=\"🎯 Get Pos\", command=self.quick_get_position, style='Primary.TButton').grid(row=0, column=2, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n-        ttk.Button(edit_buttons_frame, text=\"🗑️ Delete\", command=self.quick_delete_coordinate, style='Danger.TButton').grid(row=0, column=3, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n-        \r\n-        # Second row - ordering operations\r\n-        ttk.Button(edit_buttons_frame, text=\"⬆️ Up\", command=self.move_coordinate_up, style='Info.TButton').grid(row=1, column=0, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n-        ttk.Button(edit_buttons_frame, text=\"⬇️ Down\", command=self.move_coordinate_down, style='Info.TButton').grid(row=1, column=1, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n-        ttk.Button(edit_buttons_frame, text=\"🔢 Order\", command=self.show_order_dialog, style='Info.TButton').grid(row=1, column=2, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n-        ttk.Button(edit_buttons_frame, text=\"💾 Save\", command=self.save_coordinates, style='Success.TButton').grid(row=1, column=3, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n-        \r\n-        # Quick settings panel with better colors\r\n-        quick_settings_frame = ttk.LabelFrame(right_frame, text=\"⚡ Quick Settings\", padding=\"10\")\r\n-        quick_settings_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=10)\r\n-        quick_settings_frame.columnconfigure(1, weight=1)\r\n-        \r\n-        # Selected coordinate info with dark text\r\n-        tk.Label(quick_settings_frame, text=\"Selected:\", font=(\"Segoe UI\", 10, \"bold\"), \r\n-                bg=COLORS['light'], fg=COLORS['dark']).grid(row=0, column=0, sticky=tk.W)\r\n-        self.selected_coord_label = tk.Label(quick_settings_frame, text=\"None selected\", \r\n-                                           bg=COLORS['light'], fg=COLORS['info'], font=(\"Segoe UI\", 10))\r\n-        self.selected_coord_label.grid(row=0, column=1, sticky=tk.W, padx=(10, 0))\r\n-        \r\n-        # Quick edit fields labels with dark text\r\n-        tk.Label(quick_settings_frame, text=\"Name:\", font=(\"Segoe UI\", 9), \r\n-                bg=COLORS['light'], fg=COLORS['dark']).grid(row=1, column=0, sticky=tk.W, pady=2)\r\n-        self.quick_name_var = tk.StringVar()\r\n-        self.quick_name_entry = ttk.Entry(quick_settings_frame, textvariable=self.quick_name_var, width=20)\r\n-        self.quick_name_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)\r\n-        \r\n-        tk.Label(quick_settings_frame, text=\"X, Y:\", font=(\"Segoe UI\", 9), \r\n-                bg=COLORS['light'], fg=COLORS['dark']).grid(row=2, column=0, sticky=tk.W, pady=2)\r\n-        coord_frame = tk.Frame(quick_settings_frame, bg=COLORS['light'])\r\n-        coord_frame.grid(row=2, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)\r\n-        coord_frame.columnconfigure(0, weight=1)\r\n-        coord_frame.columnconfigure(2, weight=1)\r\n-        \r\n-        self.quick_x_var = tk.StringVar()\r\n-        self.quick_y_var = tk.StringVar()\r\n-        ttk.Entry(coord_frame, textvariable=self.quick_x_var, width=8).grid(row=0, column=0, sticky=(tk.W, tk.E))\r\n-        tk.Label(coord_frame, text=\",\", bg=COLORS['light'], fg=COLORS['dark']).grid(row=0, column=1, padx=5)\r\n-        ttk.Entry(coord_frame, textvariable=self.quick_y_var, width=8).grid(row=0, column=2, sticky=(tk.W, tk.E))\r\n-        \r\n-        tk.Label(quick_settings_frame, text=\"Enter:\", font=(\"Segoe UI\", 9), \r\n-                bg=COLORS['light'], fg=COLORS['dark']).grid(row=3, column=0, sticky=tk.W, pady=2)\r\n-        self.quick_enter_var = tk.BooleanVar()\r\n-        ttk.Checkbutton(quick_settings_frame, variable=self.quick_enter_var).grid(row=3, column=1, sticky=tk.W, padx=(10, 0), pady=2)\r\n-        \r\n-        tk.Label(quick_settings_frame, text=\"Delay:\", font=(\"Segoe UI\", 9), \r\n-                bg=COLORS['light'], fg=COLORS['dark']).grid(row=4, column=0, sticky=tk.W, pady=2)\r\n-        self.quick_delay_var = tk.StringVar()\r\n-        ttk.Entry(quick_settings_frame, textvariable=self.quick_delay_var, width=10).grid(row=4, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)\r\n-        \r\n-        # Update button\r\n-        ttk.Button(quick_settings_frame, text=\"💾 Update Selected\", command=self.update_selected_coordinate, style='Success.TButton').grid(row=5, column=0, columnspan=2, pady=10, sticky=(tk.W, tk.E))\r\n-        \r\n-        # Bind tree selection\r\n-        self.coords_tree.bind('<<TreeviewSelect>>', self.on_coordinate_select)\r\n-        \r\n-        self.populate_coordinates()\r\n-    \r\n-    def setup_settings_tab(self):\r\n-        \"\"\"Set up the settings tab with adjustable coordinates\"\"\"\r\n-        settings_tab = ttk.Frame(self.notebook)\r\n-        self.notebook.add(settings_tab, text=\"⚙️ Settings\")\r\n-        settings_tab.columnconfigure(0, weight=1)\r\n-        settings_tab.rowconfigure(1, weight=1)\r\n-        \r\n-        # Title in settings tab with dark text\r\n-        tk.Label(settings_tab, text=\"⚙️ Coordinate Settings\", font=(\"Segoe UI\", 18, \"bold\"),\r\n-                bg=COLORS['light'], fg=COLORS['dark']).grid(row=0, column=0, pady=20)\r\n-        \r\n-        # Settings frame\r\n-        settings_frame = ttk.LabelFrame(settings_tab, text=\"Edit Coordinates\", padding=\"15\")\r\n-        settings_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=20, pady=10)\r\n-        settings_frame.columnconfigure(0, weight=1)\r\n-        settings_frame.rowconfigure(0, weight=1)\r\n-        \r\n-        # Coordinate editor\r\n-        self.setup_coordinate_editor(settings_frame)\r\n-    \r\n-    def setup_coordinate_editor(self, parent):\r\n-        \"\"\"Set up the coordinate editor\"\"\"\r\n-        # Editor treeview\r\n-        editor_frame = tk.Frame(parent)\r\n-        editor_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\r\n-        editor_frame.columnconfigure(0, weight=1)\r\n-        editor_frame.rowconfigure(0, weight=1)\r\n-        \r\n-        columns = (\"Name\", \"X\", \"Y\", \"Press Enter\", \"Delay\")\r\n-        self.editor_tree = ttk.Treeview(editor_frame, columns=columns, show=\"headings\", height=12)\r\n-        \r\n-        for col in columns:\r\n-            self.editor_tree.heading(col, text=col)\r\n-            self.editor_tree.column(col, width=150, anchor=\"center\")\r\n-        \r\n-        self.editor_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))\r\n-        \r\n-        editor_scrollbar = ttk.Scrollbar(editor_frame, orient=\"vertical\", command=self.editor_tree.yview)\r\n-        editor_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))\r\n-        self.editor_tree.configure(yscrollcommand=editor_scrollbar.set)\r\n-        \r\n-        # Buttons\r\n-        button_frame = tk.Frame(parent)\r\n-        button_frame.grid(row=1, column=0, pady=20)\r\n-        \r\n-        ttk.Button(button_frame, text=\"➕ Add Coordinate\", command=self.add_coordinate, style='Primary.TButton').grid(row=0, column=0, padx=5)\r\n-        ttk.Button(button_frame, text=\"✏️ Edit Selected\", command=self.edit_coordinate, style='Primary.TButton').grid(row=0, column=1, padx=5)\r\n-        ttk.Button(button_frame, text=\"🗑️ Delete Selected\", command=self.delete_coordinate, style='Danger.TButton').grid(row=0, column=2, padx=5)\r\n-        ttk.Button(button_frame, text=\"💾 Save Changes\", command=self.save_changes, style='Success.TButton').grid(row=0, column=3, padx=5)\r\n-        \r\n-        self.populate_editor()\r\n-    \r\n-    def setup_logs_tab(self):\r\n-        \"\"\"Set up the logs tab\"\"\"\r\n-        logs_tab = ttk.Frame(self.notebook)\r\n-        self.notebook.add(logs_tab, text=\"📋 Logs\")\r\n-        logs_tab.columnconfigure(0, weight=1)\r\n-        logs_tab.rowconfigure(1, weight=1)\r\n-        \r\n-        # Header in logs tab with dark text\r\n-        header_frame = ttk.Frame(logs_tab)\r\n-        header_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=10, pady=10)\r\n-        header_frame.columnconfigure(0, weight=1)\r\n-        \r\n-        tk.Label(header_frame, text=\"📋 Activity Logs\", font=(\"Segoe UI\", 16, \"bold\"),\r\n-                bg=COLORS['light'], fg=COLORS['dark']).grid(row=0, column=0, sticky=tk.W)\r\n-        ttk.Button(header_frame, text=\"Clear Logs\", command=self.clear_logs, style='Primary.TButton').grid(row=0, column=1)\r\n-        \r\n-        # Logs\r\n-        logs_frame = ttk.Frame(logs_tab)\r\n-        logs_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=10, pady=(0, 10))\r\n-        logs_frame.columnconfigure(0, weight=1)\r\n-        logs_frame.rowconfigure(0, weight=1)\r\n-        \r\n-        self.logs_text = tk.Text(logs_frame, wrap=tk.WORD, font=(\"Consolas\", 9), state=tk.DISABLED,\r\n-                                bg='white', fg='#000000', insertbackground='black')\r\n-        self.logs_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\r\n-        \r\n-        logs_scrollbar = ttk.Scrollbar(logs_frame, orient=\"vertical\", command=self.logs_text.yview)\r\n-        logs_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))\r\n-        self.logs_text.configure(yscrollcommand=logs_scrollbar.set)\r\n-        \r\n-        self.log_message(\"Application started\", \"INFO\")\r\n-    \r\n-    def start_auto_refresh(self):\r\n-        \"\"\"Start automatic clipboard refresh every 10 seconds\"\"\"\r\n-        def auto_refresh():\r\n-            if self.auto_refresh_enabled:\r\n-                self.refresh_clipboard()\r\n-                # Schedule next refresh\r\n-                self.clipboard_refresh_timer = self.root.after(10000, auto_refresh)  # 10 seconds\r\n-        \r\n-        # Start the first refresh after 10 seconds\r\n-        self.clipboard_refresh_timer = self.root.after(10000, auto_refresh)\r\n-    \r\n-    def stop_auto_refresh(self):\r\n-        \"\"\"Stop automatic clipboard refresh\"\"\"\r\n-        self.auto_refresh_enabled = False\r\n-        if self.clipboard_refresh_timer:\r\n-            self.root.after_cancel(self.clipboard_refresh_timer)\r\n-    \r\n-    def toggle_auto_refresh(self):\r\n-        \"\"\"Toggle automatic clipboard refresh on/off\"\"\"\r\n-        if self.auto_refresh_enabled:\r\n-            self.stop_auto_refresh()\r\n-            self.auto_refresh_btn.config(text=\"⏰ Auto-Refresh: OFF\")\r\n-            self.update_status(\"🔄 Auto-refresh disabled\", \"warning\")\r\n-            self.log_message(\"Auto-refresh disabled\", \"INFO\")\r\n-        else:\r\n-            self.auto_refresh_enabled = True\r\n-            self.start_auto_refresh()\r\n-            self.auto_refresh_btn.config(text=\"⏰ Auto-Refresh: ON\")\r\n-            self.update_status(\"🔄 Auto-refresh enabled (every 10s)\", \"success\")\r\n-            self.log_message(\"Auto-refresh enabled\", \"INFO\")\r\n-    \r\n-    def populate_coordinates(self):\r\n-        \"\"\"Populate main coordinates tree\"\"\"\r\n-        # Clear existing items\r\n-        for item in self.coords_tree.get_children():\r\n-            self.coords_tree.delete(item)\r\n-        \r\n-        # Configure tag for proper text display\r\n-        self.coords_tree.tag_configure('coordinate_row', foreground='#000000', font=('Segoe UI', 10))\r\n-        \r\n-        # Add coordinates with proper formatting\r\n-        for i, coord in enumerate(self.coordinates):\r\n-            # Ensure all values are properly formatted\r\n-            name = str(coord.get(\"name\", f\"Position {i+1}\"))[:15]  # Limit name length\r\n-            x_val = str(coord.get(\"x\", 0))\r\n-            y_val = str(coord.get(\"y\", 0))\r\n-            enter_val = \"Yes\" if coord.get(\"press_enter_after_paste\", False) else \"No\"\r\n-            delay_val = f\"{coord.get('delay_after_action', 1.0):.1f}s\"\r\n-            \r\n-            self.coords_tree.insert(\"\", \"end\", values=(\r\n-                name, x_val, y_val, enter_val, delay_val\r\n-            ), tags=('coordinate_row',))\r\n-        \r\n-        # Force refresh\r\n-        self.coords_tree.update_idletasks()\r\n-    \r\n-    def populate_editor(self):\r\n-        \"\"\"Populate editor tree\"\"\"\r\n-        for item in self.editor_tree.get_children():\r\n-            self.editor_tree.delete(item)\r\n-        \r\n-        self.editor_tree.tag_configure('black_text', foreground='black')\r\n-\r\n-        for coord in self.coordinates:\r\n-            self.editor_tree.insert(\"\", \"end\", values=(\r\n-                coord[\"name\"], coord[\"x\"], coord[\"y\"],\r\n-                \"Yes\" if coord[\"press_enter_after_paste\"] else \"No\",\r\n-                coord['delay_after_action']\r\n-            ), tags=('black_text',))\r\n-    \r\n-    def add_coordinate(self):\r\n-        \"\"\"Add new coordinate\"\"\"\r\n-        self.edit_coordinate_dialog()\r\n-    \r\n-    def edit_coordinate(self):\r\n-        \"\"\"Edit selected coordinate\"\"\"\r\n-        selection = self.editor_tree.selection()\r\n-        if not selection:\r\n-            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to edit.\")\r\n-            return\r\n-        \r\n-        index = self.editor_tree.index(selection[0])\r\n-        self.edit_coordinate_dialog(index)\r\n-    \r\n-    def edit_coordinate_dialog(self, index=None):\r\n-        \"\"\"Show coordinate edit dialog\"\"\"\r\n-        dialog = tk.Toplevel(self.root)\r\n-        dialog.title(\"Edit Coordinate\" if index is not None else \"Add Coordinate\")\r\n-        dialog.geometry(\"400x320\")\r\n-        dialog.transient(self.root)\r\n-        dialog.grab_set()\r\n-        dialog.configure(bg=COLORS['light'])\r\n-\r\n-        # Center dialog\r\n-        dialog.update_idletasks()\r\n-        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)\r\n-        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)\r\n-        dialog.geometry(f\"+{x}+{y}\")\r\n-        \r\n-        # Fields Frame\r\n-        fields_frame = tk.Frame(dialog, bg=COLORS['light'])\r\n-        fields_frame.pack(padx=20, pady=20, fill='both', expand=True)\r\n-\r\n-        # Fields\r\n-        ttk.Label(fields_frame, text=\"Name:\", background=COLORS['light'], foreground=COLORS['dark']).grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)\r\n-        name_var = tk.StringVar(value=self.coordinates[index][\"name\"] if index is not None else \"New Position\")\r\n-        ttk.Entry(fields_frame, textvariable=name_var, width=30).grid(row=0, column=1, padx=10, pady=5)\r\n-        \r\n-        ttk.Label(fields_frame, text=\"X Coordinate:\", background=COLORS['light'], foreground=COLORS['dark']).grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)\r\n-        x_var = tk.StringVar(value=str(self.coordinates[index][\"x\"]) if index is not None else \"100\")\r\n-        ttk.Entry(fields_frame, textvariable=x_var, width=30).grid(row=1, column=1, padx=10, pady=5)\r\n-        \r\n-        ttk.Label(fields_frame, text=\"Y Coordinate:\", background=COLORS['light'], foreground=COLORS['dark']).grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)\r\n-        y_var = tk.StringVar(value=str(self.coordinates[index][\"y\"]) if index is not None else \"100\")\r\n-        ttk.Entry(fields_frame, textvariable=y_var, width=30).grid(row=2, column=1, padx=10, pady=5)\r\n-        \r\n-        ttk.Label(fields_frame, text=\"Press Enter:\", background=COLORS['light'], foreground=COLORS['dark']).grid(row=3, column=0, sticky=tk.W, padx=10, pady=5)\r\n-        enter_var = tk.BooleanVar(value=self.coordinates[index][\"press_enter_after_paste\"] if index is not None else True)\r\n-        ttk.Checkbutton(fields_frame, variable=enter_var).grid(row=3, column=1, sticky=tk.W, padx=10, pady=5)\r\n-        \r\n-        ttk.Label(fields_frame, text=\"Delay (sec):\", background=COLORS['light'], foreground=COLORS['dark']).grid(row=4, column=0, sticky=tk.W, padx=10, pady=5)\r\n-        delay_var = tk.StringVar(value=str(self.coordinates[index][\"delay_after_action\"]) if index is not None else \"1.0\")\r\n-        ttk.Entry(fields_frame, textvariable=delay_var, width=30).grid(row=4, column=1, padx=10, pady=5)\r\n-        \r\n-        # Get current mouse position button\r\n-        def get_mouse_pos():\r\n-            try:\r\n-                dialog.withdraw()\r\n-                result = messagebox.askokcancel(\"Get Position\", \r\n-                    \"1. Position your mouse where you want to capture\\n\"\r\n-                    \"2. Click OK\\n\" \r\n-                    \"3. DO NOT move mouse for 3 seconds\\n\\n\"\r\n-                    \"The position will be captured automatically.\")\r\n-                \r\n-                if result:\r\n-                    time.sleep(3)\r\n-                    x, y = pyautogui.position()\r\n-                    x_var.set(str(x))\r\n-                    y_var.set(str(y))\r\n-                    dialog.deiconify()\r\n-                    messagebox.showinfo(\"Success\", f\"Position captured: ({x}, {y})\")\r\n-                else:\r\n-                    dialog.deiconify()\r\n-            except Exception as e:\r\n-                dialog.deiconify()\r\n-                messagebox.showerror(\"Error\", f\"Failed to capture position: {str(e)}\")\r\n-        \r\n-        ttk.Button(fields_frame, text=\"🎯 Get Current Mouse Position\", command=get_mouse_pos, style='Info.TButton').grid(row=5, column=0, columnspan=2, pady=10)\r\n-        \r\n-        # Buttons Frame\r\n-        button_frame = tk.Frame(dialog, bg=COLORS['light'])\r\n-        button_frame.pack(pady=10)\r\n-\r\n-        # Buttons\r\n-        def save_coordinate():\r\n-            try:\r\n-                coord = {\r\n-                    \"name\": name_var.get(),\r\n-                    \"x\": int(x_var.get()),\r\n-                    \"y\": int(y_var.get()),\r\n-                    \"press_enter_after_paste\": enter_var.get(),\r\n-                    \"delay_after_action\": float(delay_var.get())\r\n-                }\r\n-                \r\n-                if index is not None:\r\n-                    self.coordinates[index] = coord\r\n-                else:\r\n-                    self.coordinates.append(coord)\r\n-                \r\n-                self.populate_editor()\r\n-                dialog.destroy()\r\n-                \r\n-            except ValueError:\r\n-                messagebox.showerror(\"Invalid Input\", \"Please enter valid numbers for coordinates and delay.\")\r\n-        \r\n-        ttk.Button(button_frame, text=\"💾 Save\", command=save_coordinate, style='Success.TButton').grid(row=0, column=0, padx=5)\r\n-        ttk.Button(button_frame, text=\"❌ Cancel\", command=dialog.destroy, style='Danger.TButton').grid(row=0, column=1, padx=5)\r\n-    \r\n-    def delete_coordinate(self):\r\n-        \"\"\"Delete selected coordinate\"\"\"\r\n-        selection = self.editor_tree.selection()\r\n-        if not selection:\r\n-            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to delete.\")\r\n-            return\r\n-        \r\n-        if messagebox.askyesno(\"Confirm Delete\", \"Are you sure you want to delete this coordinate?\"):\r\n-            index = self.editor_tree.index(selection[0])\r\n-            del self.coordinates[index]\r\n-            self.populate_editor()\r\n-    \r\n-    def save_changes(self):\r\n-        \"\"\"Save all changes\"\"\"\r\n-        self.save_coordinates()\r\n-        self.populate_coordinates()\r\n-        messagebox.showinfo(\"Saved\", \"Coordinates saved successfully!\")\r\n-        self.log_message(\"Coordinates configuration saved\", \"INFO\")\r\n-    \r\n-    def on_coordinate_select(self, event):\r\n-        \"\"\"Handle coordinate selection in main tab\"\"\"\r\n-        selection = self.coords_tree.selection()\r\n-        if selection:\r\n-            index = self.coords_tree.index(selection[0])\r\n-            coord = self.coordinates[index]\r\n-            \r\n-            # Update quick settings panel\r\n-            self.selected_coord_label.config(text=f\"{coord['name']} (#{index+1})\")\r\n-            self.quick_name_var.set(coord[\"name\"])\r\n-            self.quick_x_var.set(str(coord[\"x\"]))\r\n-            self.quick_y_var.set(str(coord[\"y\"]))\r\n-            self.quick_enter_var.set(coord[\"press_enter_after_paste\"])\r\n-            self.quick_delay_var.set(str(coord[\"delay_after_action\"]))\r\n-        else:\r\n-            self.selected_coord_label.config(text=\"None selected\")\r\n-            self.quick_name_var.set(\"\")\r\n-            self.quick_x_var.set(\"\")\r\n-            self.quick_y_var.set(\"\")\r\n-            self.quick_enter_var.set(False)\r\n-            self.quick_delay_var.set(\"\")\r\n-    \r\n-    def quick_add_coordinate(self):\r\n-        \"\"\"Quick add new coordinate\"\"\"\r\n-        new_coord = {\r\n-            \"name\": f\"Position {len(self.coordinates) + 1}\",\r\n-            \"x\": 100,\r\n-            \"y\": 100,\r\n-            \"press_enter_after_paste\": True,\r\n-            \"delay_after_action\": 1.0\r\n-        }\r\n-        self.coordinates.append(new_coord)\r\n-        self.populate_coordinates()\r\n-        self.save_coordinates()\r\n-        # Select the new coordinate\r\n-        children = self.coords_tree.get_children()\r\n-        if children:\r\n-            self.coords_tree.selection_set(children[-1])\r\n-            self.coords_tree.focus(children[-1])\r\n-        self.log_message(f\"Added new coordinate: {new_coord['name']}\", \"INFO\")\r\n-    \r\n-    def quick_edit_coordinate(self):\r\n-        \"\"\"Quick edit selected coordinate\"\"\"\r\n-        selection = self.coords_tree.selection()\r\n-        if not selection:\r\n-            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to edit.\")\r\n-            return\r\n-        \r\n-        index = self.coords_tree.index(selection[0])\r\n-        self.edit_coordinate_dialog(index)\r\n-    \r\n-    def quick_get_position(self):\r\n-        \"\"\"Quick get mouse position for selected coordinate\"\"\"\r\n-        def get_position():\r\n-            try:\r\n-                # Hide main window temporarily\r\n-                self.root.withdraw()\r\n-                \r\n-                # Show instruction dialog\r\n-                result = messagebox.askokcancel(\"Get Position\", \r\n-                    \"1. Position your mouse where you want to capture\\n\"\r\n-                    \"2. Click OK\\n\"\r\n-                    \"3. DO NOT move mouse for 3 seconds\\n\\n\"\r\n-                    \"The position will be captured automatically.\")\r\n-                \r\n-                if result:\r\n-                    time.sleep(3)\r\n-                    x, y = pyautogui.position()\r\n-                    \r\n-                    # Update the quick settings fields\r\n-                    self.quick_x_var.set(str(x))\r\n-                    self.quick_y_var.set(str(y))\r\n-                    \r\n-                    # Show main window again\r\n-                    self.root.deiconify()\r\n-                    self.root.lift()\r\n-                    \r\n-                    # Update status and log\r\n-                    self.update_status(f\"✅ Position captured: ({x}, {y})\", \"success\")\r\n-                    self.log_message(f\"Captured position: ({x}, {y})\", \"INFO\")\r\n-                    \r\n-                    # If a coordinate is selected, show message about updating\r\n-                    selection = self.coords_tree.selection()\r\n-                    if selection:\r\n-                        messagebox.showinfo(\"Position Captured\", \r\n-                            f\"Position ({x}, {y}) captured!\\n\\n\"\r\n-                            \"Click 'Update Selected' to save this position to the selected coordinate.\")\r\n-                    else:\r\n-                        messagebox.showinfo(\"Position Captured\", \r\n-                            f\"Position ({x}, {y}) captured!\\n\\n\"\r\n-                            \"You can now use 'Add' to create a new coordinate with this position.\")\r\n-                else:\r\n-                    # Show main window again if cancelled\r\n-                    self.root.deiconify()\r\n-                    self.root.lift()\r\n-                    \r\n-            except Exception as e:\r\n-                # Make sure window is shown again\r\n-                self.root.deiconify()\r\n-                self.root.lift()\r\n-                messagebox.showerror(\"Error\", f\"Failed to capture position: {str(e)}\")\r\n-                self.log_message(f\"Position capture error: {str(e)}\", \"ERROR\")\r\n-        \r\n-        # Run in thread to avoid blocking\r\n-        thread = threading.Thread(target=get_position)\r\n-        thread.daemon = True\r\n-        thread.start()\r\n-    \r\n-    def quick_delete_coordinate(self):\r\n-        \"\"\"Quick delete selected coordinate\"\"\"\r\n-        selection = self.coords_tree.selection()\r\n-        if not selection:\r\n-            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to delete.\")\r\n-            return\r\n-        \r\n-        index = self.coords_tree.index(selection[0])\r\n-        coord_name = self.coordinates[index][\"name\"]\r\n-        \r\n-        if messagebox.askyesno(\"Confirm Delete\", f\"Delete '{coord_name}'?\"):\r\n-            del self.coordinates[index]\r\n-            self.populate_coordinates()\r\n-            self.save_coordinates()\r\n-            self.log_message(f\"Deleted coordinate: {coord_name}\", \"INFO\")\r\n-            \r\n-            # Clear quick settings\r\n-            self.selected_coord_label.config(text=\"None selected\")\r\n-            self.quick_name_var.set(\"\")\r\n-            self.quick_x_var.set(\"\")\r\n-            self.quick_y_var.set(\"\")\r\n-            self.quick_enter_var.set(False)\r\n-            self.quick_delay_var.set(\"\")\r\n-    \r\n-    def move_coordinate_up(self):\r\n-        \"\"\"Move selected coordinate up in the list\"\"\"\r\n-        selection = self.coords_tree.selection()\r\n-        if not selection:\r\n-            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to move.\")\r\n-            return\r\n-        \r\n-        index = self.coords_tree.index(selection[0])\r\n-        if index == 0:\r\n-            messagebox.showinfo(\"Cannot Move\", \"This coordinate is already at the top.\")\r\n-            return\r\n-        \r\n-        # Swap coordinates\r\n-        self.coordinates[index], self.coordinates[index-1] = self.coordinates[index-1], self.coordinates[index]\r\n-        self.populate_coordinates()\r\n-        self.save_coordinates()\r\n-        \r\n-        # Re-select the moved coordinate\r\n-        children = self.coords_tree.get_children()\r\n-        if index-1 < len(children):\r\n-            self.coords_tree.selection_set(children[index-1])\r\n-            self.coords_tree.focus(children[index-1])\r\n-        \r\n-        self.update_status(f\"✅ Moved '{self.coordinates[index-1]['name']}' up\", \"success\")\r\n-        self.log_message(f\"Moved coordinate up: {self.coordinates[index-1]['name']}\", \"INFO\")\r\n-    \r\n-    def move_coordinate_down(self):\r\n-        \"\"\"Move selected coordinate down in the list\"\"\"\r\n-        selection = self.coords_tree.selection()\r\n-        if not selection:\r\n-            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to move.\")\r\n-            return\r\n-        \r\n-        index = self.coords_tree.index(selection[0])\r\n-        if index == len(self.coordinates) - 1:\r\n-            messagebox.showinfo(\"Cannot Move\", \"This coordinate is already at the bottom.\")\r\n-            return\r\n-        \r\n-        # Swap coordinates\r\n-        self.coordinates[index], self.coordinates[index+1] = self.coordinates[index+1], self.coordinates[index]\r\n-        self.populate_coordinates()\r\n-        self.save_coordinates()\r\n-        \r\n-        # Re-select the moved coordinate\r\n-        children = self.coords_tree.get_children()\r\n-        if index+1 < len(children):\r\n-            self.coords_tree.selection_set(children[index+1])\r\n-            self.coords_tree.focus(children[index+1])\r\n-        \r\n-        self.update_status(f\"✅ Moved '{self.coordinates[index+1]['name']}' down\", \"success\")\r\n-        self.log_message(f\"Moved coordinate down: {self.coordinates[index+1]['name']}\", \"INFO\")\r\n-    \r\n-    def show_order_dialog(self):\r\n-        \"\"\"Show dialog to manually set coordinate order\"\"\"\r\n-        dialog = tk.Toplevel(self.root)\r\n-        dialog.title(\"Reorder Coordinates\")\r\n-        dialog.geometry(\"500x400\")\r\n-        dialog.transient(self.root)\r\n-        dialog.grab_set()\r\n-        dialog.configure(bg=COLORS['light'])\r\n-        \r\n-        # Center dialog\r\n-        dialog.update_idletasks()\r\n-        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)\r\n-        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)\r\n-        dialog.geometry(f\"+{x}+{y}\")\r\n-        \r\n-        # Header\r\n-        header_frame = tk.Frame(dialog, bg=COLORS['primary'], height=60)\r\n-        header_frame.pack(fill='x', pady=(0, 10))\r\n-        header_frame.pack_propagate(False)\r\n-        tk.Label(header_frame, text=\"🔢 Reorder Coordinates\", font=(\"Segoe UI\", 16, \"bold\"),\r\n-                bg=COLORS['primary'], fg=COLORS['text_on_primary']).pack(expand=True)\r\n-        \r\n-        # Instructions\r\n-        tk.Label(dialog, text=\"Drag and drop or use buttons to reorder:\", \r\n-                bg=COLORS['light'], fg=COLORS['dark'], font=(\"Segoe UI\", 10)).pack(pady=5)\r\n-        \r\n-        # Listbox for reordering\r\n-        list_frame = tk.Frame(dialog, bg=COLORS['light'])\r\n-        list_frame.pack(fill='both', expand=True, padx=20, pady=10)\r\n-        \r\n-        order_listbox = tk.Listbox(list_frame, font=(\"Segoe UI\", 10), height=12,\r\n-                                  bg='white', fg=COLORS['dark'], selectbackground=COLORS['info'])\r\n-        order_listbox.pack(side='left', fill='both', expand=True)\r\n-        \r\n-        order_scrollbar = ttk.Scrollbar(list_frame, orient=\"vertical\", command=order_listbox.yview)\r\n-        order_scrollbar.pack(side='right', fill='y')\r\n-        order_listbox.configure(yscrollcommand=order_scrollbar.set)\r\n-        \r\n-        # Populate listbox\r\n-        for i, coord in enumerate(self.coordinates):\r\n-            order_listbox.insert(tk.END, f\"{i+1}. {coord['name']} ({coord['x']}, {coord['y']})\")\r\n-        \r\n-        # Buttons for moving\r\n-        button_frame = tk.Frame(dialog, bg=COLORS['light'])\r\n-        button_frame.pack(pady=10)\r\n-        \r\n-        def move_up():\r\n-            try:\r\n-                index = order_listbox.curselection()[0]\r\n-                if index > 0:\r\n-                    # Swap in list and coordinates\r\n-                    order_listbox.insert(index-1, order_listbox.get(index))\r\n-                    order_listbox.delete(index+1)\r\n-                    order_listbox.selection_set(index-1)\r\n-                    \r\n-                    self.coordinates[index], self.coordinates[index-1] = self.coordinates[index-1], self.coordinates[index]\r\n-            except IndexError:\r\n-                messagebox.showwarning(\"No Selection\", \"Please select an item to move.\")\r\n-        \r\n-        def move_down():\r\n-            try:\r\n-                index = order_listbox.curselection()[0]\r\n-                if index < order_listbox.size() - 1:\r\n-                    # Swap in list and coordinates\r\n-                    order_listbox.insert(index+2, order_listbox.get(index))\r\n-                    order_listbox.delete(index)\r\n-                    order_listbox.selection_set(index+1)\r\n-                    \r\n-                    self.coordinates[index], self.coordinates[index+1] = self.coordinates[index+1], self.coordinates[index]\r\n-            except IndexError:\r\n-                messagebox.showwarning(\"No Selection\", \"Please select an item to move.\")\r\n-        \r\n-        def save_order():\r\n-            self.populate_coordinates()\r\n-            self.save_coordinates()\r\n-            self.update_status(\"✅ Coordinate order saved\", \"success\")\r\n-            self.log_message(\"Coordinate order updated\", \"INFO\")\r\n-            dialog.destroy()\r\n-        \r\n-        ttk.Button(button_frame, text=\"⬆️ Move Up\", command=move_up, style='Info.TButton').pack(side='left', padx=5)\r\n-        ttk.Button(button_frame, text=\"⬇️ Move Down\", command=move_down, style='Info.TButton').pack(side='left', padx=5)\r\n-        ttk.Button(button_frame, text=\"💾 Save Order\", command=save_order, style='Success.TButton').pack(side='left', padx=5)\r\n-        ttk.Button(button_frame, text=\"❌ Cancel\", command=dialog.destroy, style='Danger.TButton').pack(side='left', padx=5)\r\n-    \r\n-    def update_selected_coordinate(self):\r\n-        \"\"\"Update the selected coordinate with quick settings values\"\"\"\r\n-        selection = self.coords_tree.selection()\r\n-        if not selection:\r\n-            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to update.\")\r\n-            return\r\n-        \r\n-        try:\r\n-            index = self.coords_tree.index(selection[0])\r\n-            \r\n-            # Validate inputs\r\n-            name = self.quick_name_var.get().strip()\r\n-            x = int(self.quick_x_var.get())\r\n-            y = int(self.quick_y_var.get())\r\n-            delay = float(self.quick_delay_var.get())\r\n-            \r\n-            if not name:\r\n-                messagebox.showerror(\"Invalid Input\", \"Name cannot be empty.\")\r\n-                return\r\n-            \r\n-            # Update coordinate\r\n-            self.coordinates[index] = {\r\n-                \"name\": name,\r\n-                \"x\": x,\r\n-                \"y\": y,\r\n-                \"press_enter_after_paste\": self.quick_enter_var.get(),\r\n-                \"delay_after_action\": delay\r\n-            }\r\n-            \r\n-            self.populate_coordinates()\r\n-            self.save_coordinates()\r\n-            \r\n-            # Re-select the updated coordinate\r\n-            children = self.coords_tree.get_children()\r\n-            if index < len(children):\r\n-                self.coords_tree.selection_set(children[index])\r\n-                self.coords_tree.focus(children[index])\r\n-            \r\n-            self.update_status(f\"✅ Updated '{name}'\", \"success\")\r\n-            self.log_message(f\"Updated coordinate: {name} at ({x}, {y})\", \"INFO\")\r\n-            \r\n-        except ValueError as e:\r\n-            messagebox.showerror(\"Invalid Input\", \"Please enter valid numbers for coordinates and delay.\")\r\n-        except Exception as e:\r\n-            messagebox.showerror(\"Error\", f\"Failed to update coordinate: {str(e)}\")\r\n-    \r\n-    def refresh_clipboard(self):\r\n-        \"\"\"Refresh clipboard display\"\"\"\r\n-        try:\r\n-            clipboard_content = pyperclip.paste()\r\n-            \r\n-            # Skip if clipboard contains JSON (likely from our own config)\r\n-            if clipboard_content.strip().startswith('{') or clipboard_content.strip().startswith('['):\r\n-                try:\r\n-                    import json\r\n-                    json.loads(clipboard_content)\r\n-                    # If it's valid JSON, probably our config - get real clipboard\r\n-                    clipboard_content = \"No text in clipboard (contains data/JSON)\"\r\n-                except:\r\n-                    pass  # Not JSON, continue normally\r\n-            \r\n-            self.clipboard_text.config(state='normal')\r\n-            self.clipboard_text.delete(1.0, tk.END)\r\n-            \r\n-            # Add timestamp and content\r\n-            import datetime\r\n-            timestamp = datetime.datetime.now().strftime(\"%H:%M:%S\")\r\n-            header = f\"🕒 Last updated: {timestamp}\\n\" + \"=\"*50 + \"\\n\"\r\n-            \r\n-            # Show full clipboard content (no truncation)\r\n-            display_content = clipboard_content\r\n-            \r\n-            self.clipboard_text.insert(1.0, header + display_content)\r\n-            \r\n-            # Configure proper text styling\r\n-            self.clipboard_text.tag_add(\"black_text\", \"1.0\", tk.END)\r\n-            self.clipboard_text.tag_configure(\"black_text\", foreground=\"#000000\", font=(\"Cascadia Code\", 11))\r\n-            self.clipboard_text.config(state='disabled', fg='#000000')\r\n-            \r\n-            # Show success message briefly\r\n-            self.update_status(\"✅ Clipboard refreshed\", \"success\")\r\n-            self.log_message(f\"Clipboard refreshed - {len(clipboard_content)} characters\", \"INFO\")\r\n-        except Exception as e:\r\n-            self.update_status(f\"❌ Clipboard Error: {str(e)}\", \"error\")\r\n-            self.log_message(f\"Clipboard refresh error: {str(e)}\", \"ERROR\")\r\n-    \r\n-    def update_status(self, message, status_type=\"info\"):\r\n-        \"\"\"Update status with colors\"\"\"\r\n-        colors = {'success': COLORS['success'], 'error': COLORS['danger'], 'warning': COLORS['warning'], 'info': COLORS['info']}\r\n-        color = colors.get(status_type, COLORS['secondary'])\r\n-        self.status_container.config(bg=color)\r\n-        self.status_label.config(text=message, bg=color, fg=COLORS['dark'])\r\n-    \r\n-    def log_message(self, message, level=\"INFO\"):\r\n-        \"\"\"Add message to logs\"\"\"\r\n-        import datetime\r\n-        timestamp = datetime.datetime.now().strftime(\"%H:%M:%S\")\r\n-        log_entry = f\"[{timestamp}] {level}: {message}\\n\"\r\n-        \r\n-        # Only log if logs_text widget exists (logs tab has been created)\r\n-        if hasattr(self, 'logs_text') and self.logs_text:\r\n-            self.logs_text.config(state=tk.NORMAL)\r\n-            self.logs_text.insert(tk.END, log_entry)\r\n-            self.logs_text.see(tk.END)\r\n-            self.logs_text.config(state=tk.DISABLED)\r\n-    \r\n-    def clear_logs(self):\r\n-        \"\"\"Clear all logs\"\"\"\r\n-        self.logs_text.config(state=tk.NORMAL)\r\n-        self.logs_text.delete(1.0, tk.END)\r\n-        self.logs_text.config(state=tk.DISABLED)\r\n-        self.log_message(\"Logs cleared\", \"INFO\")\r\n-    \r\n-    def submit_action(self):\r\n-        \"\"\"Start the sequence\"\"\"\r\n-        if self.is_running:\r\n-            return\r\n-        \r\n-        try:\r\n-            clipboard_content = pyperclip.paste().strip()\r\n-            if not clipboard_content:\r\n-                messagebox.showwarning(\"Empty Clipboard\", \"Please copy some text first.\")\r\n-                return\r\n-        except Exception as e:\r\n-            messagebox.showerror(\"Clipboard Error\", f\"Error: {str(e)}\")\r\n-            return\r\n-        \r\n-        self.is_running = True\r\n-        self.submit_btn.config(state=\"disabled\")\r\n-        self.stop_btn.config(state=\"normal\")\r\n-        self.start_time = time.time()\r\n-        self.completed_count = 0\r\n-        \r\n-        self.log_message(f\"Starting sequence with {len(self.coordinates)} coordinates\", \"INFO\")\r\n-        \r\n-        self.current_thread = threading.Thread(target=self.execute_sequence)\r\n-        self.current_thread.daemon = True\r\n-        self.current_thread.start()\r\n-    \r\n-    def stop_action(self):\r\n-        \"\"\"Stop the sequence\"\"\"\r\n-        self.is_running = False\r\n-        self.submit_btn.config(state=\"normal\")\r\n-        self.stop_btn.config(state=\"disabled\")\r\n-        self.update_status(\"🛑 Sequence stopped\", \"warning\")\r\n-        self.log_message(\"Sequence stopped by user\", \"WARNING\")\r\n-    \r\n-    def execute_sequence(self):\r\n-        \"\"\"Execute the pasting sequence\"\"\"\r\n-        try:\r\n-            total_coords = len(self.coordinates)\r\n-            self.progress.config(maximum=total_coords)\r\n-            \r\n-            # Initial delay\r\n-            for i in range(3, 0, -1):\r\n-                if not self.is_running:\r\n-                    return\r\n-                self.update_status(f\"⏳ Starting in {i} seconds...\", \"warning\")\r\n-                time.sleep(1)\r\n-            \r\n-            # Process each coordinate\r\n-            for index, coord in enumerate(self.coordinates):\r\n-                if not self.is_running:\r\n-                    return\r\n-                \r\n-                self.update_status(f\"🔄 Processing {coord['name']} ({index+1}/{total_coords})\", \"info\")\r\n-                self.log_message(f\"Processing {coord['name']} at ({coord['x']}, {coord['y']})\", \"INFO\")\r\n-                \r\n-                # Move and click\r\n-                pyautogui.moveTo(coord[\"x\"], coord[\"y\"], duration=0.5)\r\n-                pyautogui.click(coord[\"x\"], coord[\"y\"])\r\n-                time.sleep(0.2)\r\n-                \r\n-                # Paste\r\n-                pyautogui.hotkey('ctrl', 'v')\r\n-                \r\n-                # Press Enter if configured\r\n-                if coord[\"press_enter_after_paste\"]:\r\n-                    time.sleep(0.1)\r\n-                    pyautogui.press('enter')\r\n-                    self.log_message(f\"Pressed Enter after pasting at {coord['name']}\", \"DEBUG\")\r\n-                \r\n-                self.completed_count += 1\r\n-                self.progress.config(value=index + 1)\r\n-                self.log_message(f\"Completed {coord['name']}\", \"SUCCESS\")\r\n-                \r\n-                # Wait before next\r\n-                if index < total_coords - 1:\r\n-                    delay = coord[\"delay_after_action\"]\r\n-                    for i in range(int(delay * 10)):\r\n-                        if not self.is_running:\r\n-                            return\r\n-                        time.sleep(0.1)\r\n-            \r\n-            if self.is_running:\r\n-                total_time = int(time.time() - self.start_time)\r\n-                self.update_status(f\"✅ Completed! {total_coords} locations in {total_time}s\", \"success\")\r\n-                self.log_message(f\"Sequence completed in {total_time} seconds\", \"SUCCESS\")\r\n-        \r\n-        except Exception as e:\r\n-            self.update_status(f\"❌ Error: {str(e)}\", \"error\")\r\n-            self.log_message(f\"Error: {str(e)}\", \"ERROR\")\r\n-        \r\n-        finally:\r\n-            self.is_running = False\r\n-            self.submit_btn.config(state=\"normal\")\r\n-            self.stop_btn.config(state=\"disabled\")\r\n-\r\n-def main():\r\n-    pyautogui.FAILSAFE = True\r\n-    pyautogui.PAUSE = 0.05\r\n-    \r\n-    root = tk.Tk()\r\n-    app = MultiCoordinatesClicker(root)\r\n-    \r\n-    # Center window\r\n-    root.update_idletasks()\r\n-    x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)\r\n-    y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)\r\n-    root.geometry(f\"+{x}+{y}\")\r\n-    \r\n-    # Handle window close event\r\n-    def on_closing():\r\n-        app.stop_auto_refresh()\r\n-        root.destroy()\r\n-    \r\n-    root.protocol(\"WM_DELETE_WINDOW\", on_closing)\r\n-    root.mainloop()\r\n-\r\n-if __name__ == \"__main__\":\r\n+import tkinter as tk\n+from tkinter import ttk, messagebox\n+import pyautogui\n+import pyperclip\n+import time\n+import threading\n+import json\n+import os\n+import base64\n+from PIL import Image, ImageDraw, ImageTk\n+import io\n+\n+# Global color scheme - Modern dark theme with good contrast\n+COLORS = {\n+    'primary': '#2C3E50',      # Dark blue-gray for headers\n+    'secondary': '#34495E',    # Slightly lighter for secondary elements\n+    'success': '#27AE60',      # Green for success actions\n+    'danger': '#E74C3C',       # Red for danger actions\n+    'warning': '#F39C12',      # Orange for warnings\n+    'info': '#3498DB',         # Blue for info\n+    'light': '#ECF0F1',        # Light gray for backgrounds\n+    'dark': '#000000',         # Dark for text\n+    'accent': '#16A085',       # Teal for accents\n+    'bg': '#FFFFFF',           # White background\n+    'text': '#000000',         # Dark text for contrast\n+    'text_on_primary': '#FFFFFF' # White text for use on dark backgrounds like primary color\n+}\n+\n+def create_app_icon():\n+    \"\"\"Create a professional-looking app icon\"\"\"\n+    # Create a 32x32 icon with a modern design\n+    img = Image.new('RGBA', (32, 32), (0, 0, 0, 0))\n+    draw = ImageDraw.Draw(img)\n+    \n+    # Draw background circle\n+    draw.ellipse([2, 2, 30, 30], fill='#2C3E50', outline='#3498DB', width=2)\n+    \n+    # Draw cursor/target symbol\n+    # Crosshair\n+    draw.line([16, 8, 16, 12], fill='#FFFFFF', width=2)\n+    draw.line([16, 20, 16, 24], fill='#FFFFFF', width=2)\n+    draw.line([8, 16, 12, 16], fill='#FFFFFF', width=2)\n+    draw.line([20, 16, 24, 16], fill='#FFFFFF', width=2)\n+    \n+    # Center dot\n+    draw.ellipse([14, 14, 18, 18], fill='#E74C3C')\n+    \n+    return img\n+\n+class MultiCoordinatesClicker:\n+    def __init__(self, root):\n+        self.root = root\n+        \n+        # Set window properties for taskbar pinning\n+        self.root.title(\"Multi Coordinates Clicker\")\n+        self.root.geometry(\"1800x700\")\n+        self.root.resizable(True, True)\n+        \n+        # Create and set the application icon\n+        try:\n+            icon_img = create_app_icon()\n+            self.icon_photo = ImageTk.PhotoImage(icon_img)\n+            self.root.iconphoto(True, self.icon_photo)\n+            \n+            # Also try to set as window icon (for Windows)\n+            # Save temporary icon file\n+            icon_path = \"temp_app_icon.ico\"\n+            # Create a larger version for ICO file\n+            large_icon = icon_img.resize((64, 64), Image.Resampling.LANCZOS)\n+            large_icon.save(icon_path, format='ICO', sizes=[(16,16), (32,32), (64,64)])\n+            \n+            # Set icon using iconbitmap (Windows-specific)\n+            if os.path.exists(icon_path):\n+                self.root.iconbitmap(icon_path)\n+                \n+        except Exception as e:\n+            print(f\"Could not set icon: {e}\")\n+        \n+        # Set window class name for better taskbar recognition\n+        self.root.wm_class(\"MultiCoordinatesClicker\", \"Multi Coordinates Clicker\")\n+        \n+        # Set additional window properties\n+        self.root.wm_title(\"🚀 Multi Coordinates Clicker - Enhanced\")\n+        \n+        # Make window appear in taskbar properly\n+        self.root.withdraw()  # Hide window temporarily\n+        self.root.deiconify()  # Show it again to ensure proper taskbar entry\n+        self.root.lift()  # Bring to front\n+        self.root.focus_force()  # Give it focus\n+        \n+        # Configure modern styling\n+        self.setup_modern_style()\n+        self.root.configure(bg=COLORS['light'])\n+        \n+        # Initialize variables\n+        self.is_running = False\n+        self.current_thread = None\n+        self.start_time = None\n+        self.completed_count = 0\n+        self.auto_refresh_enabled = True\n+        self.clipboard_refresh_timer = None\n+        self.last_clipboard_content = \"\"\n+        self.sequence_clipboard_content = \"\"\n+        \n+        # Load or create default coordinates\n+        self.coordinates = self.load_coordinates()\n+        \n+        self.setup_ui()\n+        \n+        # Start auto-monitoring for clipboard changes\n+        self.start_auto_refresh()\n+        \n+    def load_coordinates(self):\n+        \"\"\"Load coordinates from config file or create defaults\"\"\"\n+        try:\n+            if os.path.exists('coordinates_config.json'):\n+                with open('coordinates_config.json', 'r') as f:\n+                    return json.load(f)\n+        except:\n+            pass\n+        \n+        # Default coordinates\n+        return [\n+            {\"name\": \"Position 1\", \"x\": -2658, \"y\": 934, \"press_enter_after_paste\": True, \"delay_after_action\": 0.5},\n+            {\"name\": \"Position 2\", \"x\": -2002, \"y\": 985, \"press_enter_after_paste\": True, \"delay_after_action\": 0.5},\n+            {\"name\": \"Position 3\", \"x\": -2644, \"y\": 1763, \"press_enter_after_paste\": True, \"delay_after_action\": 0.5},\n+            {\"name\": \"Position 4\", \"x\": -1708, \"y\": 1664, \"press_enter_after_paste\": True, \"delay_after_action\": 0.5},\n+            {\"name\": \"Position 5\", \"x\": -1050, \"y\": 1721, \"press_enter_after_paste\": True, \"delay_after_action\": 0.5},\n+            {\"name\": \"Position 6\", \"x\": -720, \"y\": 1040, \"press_enter_after_paste\": True, \"delay_after_action\": 0.5},\n+            {\"name\": \"Position 7\", \"x\": -814, \"y\": 1699, \"press_enter_after_paste\": True, \"delay_after_action\": 0.5},\n+            {\"name\": \"Position 8\", \"x\": -75, \"y\": 1766, \"press_enter_after_paste\": True, \"delay_after_action\": 0.5}\n+        ]\n+    \n+    def save_coordinates(self):\n+        \"\"\"Save coordinates to config file\"\"\"\n+        try:\n+            with open('coordinates_config.json', 'w') as f:\n+                json.dump(self.coordinates, f, indent=2)\n+        except Exception as e:\n+            messagebox.showerror(\"Save Error\", f\"Could not save coordinates: {str(e)}\")\n+    \n+    def setup_modern_style(self):\n+        \"\"\"Configure modern visual styling\"\"\"\n+        style = ttk.Style()\n+        \n+        # Configure notebook with better contrast\n+        style.configure('Modern.TNotebook', background=COLORS['light'], borderwidth=0)\n+        style.configure('Modern.TNotebook.Tab', padding=[20, 12], font=('Segoe UI', 11, 'bold'),\n+                       background=COLORS['light'], foreground=COLORS['dark'])\n+        style.map('Modern.TNotebook.Tab', \n+                 background=[('selected', COLORS['info'])],\n+                 foreground=[('selected', COLORS['dark'])])\n+        \n+        # Configure buttons with proper contrast - ensuring all text is dark/black\n+        style.configure('Success.TButton', font=('Segoe UI', 14, 'bold'), padding=[25, 15],\n+                       background=COLORS['success'], foreground=COLORS['dark'], borderwidth=2, relief='raised')\n+        style.configure('Danger.TButton', font=('Segoe UI', 12, 'bold'), padding=[20, 10],\n+                       background=COLORS['danger'], foreground=COLORS['dark'], borderwidth=2, relief='raised')\n+        style.configure('Primary.TButton', font=('Segoe UI', 12, 'bold'), padding=[20, 10],\n+                       background=COLORS['primary'], foreground=COLORS['dark'], borderwidth=2, relief='raised')\n+        style.configure('Info.TButton', font=('Segoe UI', 12, 'bold'), padding=[20, 10],\n+                       background=COLORS['info'], foreground=COLORS['dark'], borderwidth=2, relief='raised')\n+        \n+        # Map button states for better interaction feedback\n+        for btn_style in ['Success.TButton', 'Danger.TButton', 'Primary.TButton', 'Info.TButton']:\n+            style.map(btn_style,\n+                     relief=[('pressed', 'sunken'), ('active', 'raised')],\n+                     background=[('active', COLORS['accent'])],\n+                     foreground=[('active', COLORS['dark'])])\n+        \n+        # Configure treeview with readable colors\n+        style.configure('Modern.Treeview', background=COLORS['bg'], foreground=COLORS['dark'],\n+                       font=('Segoe UI', 10), fieldbackground=COLORS['bg'], borderwidth=1)\n+        style.configure('Modern.Treeview.Heading', background=COLORS['light'], foreground=COLORS['dark'],\n+                       font=('Segoe UI', 11, 'bold'), relief='raised', borderwidth=1)\n+        \n+        # Configure entry and other widgets\n+        style.configure('TEntry', fieldbackground='white', borderwidth=2, relief='solid', foreground=COLORS['dark'])\n+        style.configure('TLabelframe', background=COLORS['light'], foreground=COLORS['dark'],\n+                       borderwidth=2, relief='solid')\n+        style.configure('TLabelframe.Label', background=COLORS['light'], foreground=COLORS['dark'],\n+                       font=('Segoe UI', 11, 'bold'))\n+    \n+    def setup_ui(self):\n+        \"\"\"Set up the user interface\"\"\"\n+        # Configure root grid\n+        self.root.columnconfigure(0, weight=1)\n+        self.root.rowconfigure(0, weight=1)\n+        \n+        # Main notebook\n+        self.notebook = ttk.Notebook(self.root, style='Modern.TNotebook')\n+        self.notebook.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=15, pady=15)\n+        \n+        # Create tabs\n+        self.setup_main_tab()\n+        self.setup_settings_tab()\n+        self.setup_logs_tab()\n+        \n+        # Initialize clipboard after all tabs are created\n+        self.refresh_clipboard()\n+        # Store initial clipboard content for change detection\n+        try:\n+            self.last_clipboard_content = pyperclip.paste()\n+        except:\n+            self.last_clipboard_content = \"\"\n+    \n+    def setup_main_tab(self):\n+        \"\"\"Set up the main control tab\"\"\"\n+        main_tab = ttk.Frame(self.notebook)\n+        self.notebook.add(main_tab, text=\"🎯 Main Control\")\n+        main_tab.columnconfigure(0, weight=1)\n+        main_tab.columnconfigure(1, weight=1)\n+        main_tab.rowconfigure(1, weight=1)\n+        \n+        # Title with better contrast\n+        title_frame = tk.Frame(main_tab, bg=COLORS['primary'], height=80)\n+        title_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))\n+        title_frame.grid_propagate(False)\n+        title_frame.columnconfigure(0, weight=1)\n+        \n+        tk.Label(title_frame, text=\"🚀 Multi Coordinates Clicker - Enhanced\", \n+                font=(\"Segoe UI\", 22, \"bold\"), bg=COLORS['primary'], fg=COLORS['text_on_primary']).grid(row=0, column=0, pady=10)\n+        tk.Label(title_frame, text=\"✨ Automated clipboard pasting with adjustable settings ✨\",\n+                font=(\"Segoe UI\", 12), bg=COLORS['primary'], fg=COLORS['text_on_primary']).grid(row=1, column=0)\n+        \n+        # Left panel\n+        left_frame = ttk.LabelFrame(main_tab, text=\"📋 Clipboard & Control\", padding=\"15\")\n+        left_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(15, 8), pady=5)\n+        left_frame.columnconfigure(0, weight=1)\n+        left_frame.rowconfigure(1, weight=1)\n+        \n+        # Clipboard\n+        clipboard_header = tk.Frame(left_frame, bg=COLORS['info'], height=35)\n+        clipboard_header.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))\n+        clipboard_header.grid_propagate(False)\n+        tk.Label(clipboard_header, text=\"📝 Current Clipboard Content\", \n+                font=(\"Segoe UI\", 12, \"bold\"), background=COLORS['info'], foreground=COLORS['dark']).grid(row=0, column=0, padx=10, pady=5)\n+        \n+        self.clipboard_text = tk.Text(left_frame, height=8, wrap=tk.WORD, font=(\"Cascadia Code\", 11),\n+                                     bg=COLORS['bg'], fg=COLORS['dark'], relief='flat', borderwidth=2,\n+                                     insertbackground=COLORS['dark'], selectbackground=COLORS['info'], selectforeground=COLORS['dark'])\n+        self.clipboard_text.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)\n+        \n+        # Configure black text tag for clipboard\n+        self.clipboard_text.tag_configure(\"black_text\", foreground=\"#000000\", font=(\"Cascadia Code\", 11))\n+        \n+        scrollbar = ttk.Scrollbar(left_frame, orient=\"vertical\", command=self.clipboard_text.yview)\n+        scrollbar.grid(row=1, column=1, sticky=(tk.N, tk.S))\n+        self.clipboard_text.configure(yscrollcommand=scrollbar.set)\n+        \n+        # Control buttons with better styling\n+        control_frame = tk.Frame(left_frame, bg=COLORS['light'])\n+        control_frame.grid(row=2, column=0, columnspan=2, pady=15, sticky=(tk.W, tk.E))\n+        control_frame.columnconfigure(0, weight=1)\n+        control_frame.columnconfigure(1, weight=1)\n+        control_frame.columnconfigure(2, weight=1)\n+        \n+        # First row of buttons\n+        ttk.Button(control_frame, text=\"🔄 Refresh Now\", command=self.refresh_clipboard, style='Info.TButton').grid(row=0, column=0, padx=3, pady=3, sticky=(tk.W, tk.E))\n+        self.auto_refresh_btn = ttk.Button(control_frame, text=\"⏰ Auto-Monitor: ON\", command=self.toggle_auto_refresh, style='Info.TButton')\n+        self.auto_refresh_btn.grid(row=0, column=1, padx=3, pady=3, sticky=(tk.W, tk.E))\n+        \n+        # Second row of buttons\n+        self.submit_btn = ttk.Button(control_frame, text=\"🚀 START SEQUENCE\", command=self.submit_action, style=\"Success.TButton\")\n+        self.submit_btn.grid(row=1, column=0, columnspan=2, padx=3, pady=3, sticky=(tk.W, tk.E))\n+        self.stop_btn = ttk.Button(control_frame, text=\"🛑 STOP\", command=self.stop_action, style=\"Danger.TButton\", state=\"disabled\")\n+        self.stop_btn.grid(row=1, column=2, padx=3, pady=3, sticky=(tk.W, tk.E))\n+        \n+        # Status\n+        status_frame = tk.Frame(left_frame, bg=COLORS['light'])\n+        status_frame.grid(row=3, column=0, columnspan=2, pady=15, sticky=(tk.W, tk.E))\n+        status_frame.columnconfigure(0, weight=1)\n+        \n+        self.status_container = tk.Frame(status_frame, bg=COLORS['success'], relief='solid', bd=2)\n+        self.status_container.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))\n+        self.status_container.columnconfigure(0, weight=1)\n+        \n+        self.status_label = tk.Label(self.status_container, text=\"✅ Ready - Click START SEQUENCE to begin\", \n+                                    bg=COLORS['success'], fg=COLORS['dark'], font=(\"Segoe UI\", 11, \"bold\"), pady=8)\n+        self.status_label.grid(row=0, column=0, sticky=(tk.W, tk.E))\n+        \n+        self.progress = ttk.Progressbar(status_frame, mode='determinate')\n+        self.progress.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=3)\n+        \n+        # Right panel\n+        right_frame = ttk.LabelFrame(main_tab, text=\"🎯 Configured Coordinates\", padding=\"15\")\n+        right_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(8, 15), pady=5)\n+        right_frame.columnconfigure(0, weight=1)\n+        right_frame.rowconfigure(0, weight=1)\n+        \n+        # Treeview with inline editing\n+        columns = (\"Name\", \"X\", \"Y\", \"Press Enter\", \"Delay\")\n+        self.coords_tree = ttk.Treeview(right_frame, columns=columns, show=\"headings\", height=12, style='Modern.Treeview')\n+        \n+        # Configure column widths and alignment\n+        column_configs = {\n+            \"Name\": {\"width\": 140, \"anchor\": \"w\"},\n+            \"X\": {\"width\": 80, \"anchor\": \"center\"},\n+            \"Y\": {\"width\": 80, \"anchor\": \"center\"},\n+            \"Press Enter\": {\"width\": 90, \"anchor\": \"center\"},\n+            \"Delay\": {\"width\": 70, \"anchor\": \"center\"}\n+        }\n+        \n+        for col in columns:\n+            self.coords_tree.heading(col, text=col)\n+            self.coords_tree.column(col, \n+                                   width=column_configs[col][\"width\"], \n+                                   anchor=column_configs[col][\"anchor\"],\n+                                   minwidth=50)\n+        \n+        self.coords_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\n+        \n+        tree_scrollbar = ttk.Scrollbar(right_frame, orient=\"vertical\", command=self.coords_tree.yview)\n+        tree_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))\n+        self.coords_tree.configure(yscrollcommand=tree_scrollbar.set)\n+        \n+        # Quick edit buttons\n+        edit_buttons_frame = tk.Frame(right_frame, bg=COLORS['light'])\n+        edit_buttons_frame.grid(row=1, column=0, columnspan=2, pady=10, sticky=(tk.W, tk.E))\n+        edit_buttons_frame.columnconfigure(0, weight=1)\n+        edit_buttons_frame.columnconfigure(1, weight=1)\n+        edit_buttons_frame.columnconfigure(2, weight=1)\n+        edit_buttons_frame.columnconfigure(3, weight=1)\n+        edit_buttons_frame.columnconfigure(4, weight=1)\n+        edit_buttons_frame.columnconfigure(5, weight=1)\n+        \n+        # First row - basic operations\n+        ttk.Button(edit_buttons_frame, text=\"➕ Add\", command=self.quick_add_coordinate, style='Primary.TButton').grid(row=0, column=0, padx=1, pady=2, sticky=(tk.W, tk.E))\n+        ttk.Button(edit_buttons_frame, text=\"✏️ Edit\", command=self.quick_edit_coordinate, style='Primary.TButton').grid(row=0, column=1, padx=1, pady=2, sticky=(tk.W, tk.E))\n+        ttk.Button(edit_buttons_frame, text=\"🎯 Get Pos\", command=self.quick_get_position, style='Primary.TButton').grid(row=0, column=2, padx=1, pady=2, sticky=(tk.W, tk.E))\n+        ttk.Button(edit_buttons_frame, text=\"🗑️ Delete\", command=self.quick_delete_coordinate, style='Danger.TButton').grid(row=0, column=3, padx=1, pady=2, sticky=(tk.W, tk.E))\n+        \n+        # Second row - ordering operations\n+        ttk.Button(edit_buttons_frame, text=\"⬆️ Up\", command=self.move_coordinate_up, style='Info.TButton').grid(row=1, column=0, padx=1, pady=2, sticky=(tk.W, tk.E))\n+        ttk.Button(edit_buttons_frame, text=\"⬇️ Down\", command=self.move_coordinate_down, style='Info.TButton').grid(row=1, column=1, padx=1, pady=2, sticky=(tk.W, tk.E))\n+        ttk.Button(edit_buttons_frame, text=\"🔢 Order\", command=self.show_order_dialog, style='Info.TButton').grid(row=1, column=2, padx=1, pady=2, sticky=(tk.W, tk.E))\n+        ttk.Button(edit_buttons_frame, text=\"💾 Save\", command=self.save_coordinates, style='Success.TButton').grid(row=1, column=3, padx=1, pady=2, sticky=(tk.W, tk.E))\n+        \n+        # Quick settings panel with better colors\n+        quick_settings_frame = ttk.LabelFrame(right_frame, text=\"⚡ Quick Settings\", padding=\"10\")\n+        quick_settings_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=10)\n+        quick_settings_frame.columnconfigure(1, weight=1)\n+        \n+        # Selected coordinate info with dark text\n+        tk.Label(quick_settings_frame, text=\"Selected:\", font=(\"Segoe UI\", 10, \"bold\"), \n+                bg=COLORS['light'], fg=COLORS['dark']).grid(row=0, column=0, sticky=tk.W)\n+        self.selected_coord_label = tk.Label(quick_settings_frame, text=\"None selected\", \n+                                           bg=COLORS['light'], fg=COLORS['info'], font=(\"Segoe UI\", 10))\n+        self.selected_coord_label.grid(row=0, column=1, sticky=tk.W, padx=(10, 0))\n+        \n+        # Quick edit fields labels with dark text\n+        tk.Label(quick_settings_frame, text=\"Name:\", font=(\"Segoe UI\", 9), \n+                bg=COLORS['light'], fg=COLORS['dark']).grid(row=1, column=0, sticky=tk.W, pady=2)\n+        self.quick_name_var = tk.StringVar()\n+        self.quick_name_entry = ttk.Entry(quick_settings_frame, textvariable=self.quick_name_var, width=20)\n+        self.quick_name_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)\n+        \n+        tk.Label(quick_settings_frame, text=\"X, Y:\", font=(\"Segoe UI\", 9), \n+                bg=COLORS['light'], fg=COLORS['dark']).grid(row=2, column=0, sticky=tk.W, pady=2)\n+        coord_frame = tk.Frame(quick_settings_frame, bg=COLORS['light'])\n+        coord_frame.grid(row=2, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)\n+        coord_frame.columnconfigure(0, weight=1)\n+        coord_frame.columnconfigure(2, weight=1)\n+        \n+        self.quick_x_var = tk.StringVar()\n+        self.quick_y_var = tk.StringVar()\n+        ttk.Entry(coord_frame, textvariable=self.quick_x_var, width=8).grid(row=0, column=0, sticky=(tk.W, tk.E))\n+        tk.Label(coord_frame, text=\",\", bg=COLORS['light'], fg=COLORS['dark']).grid(row=0, column=1, padx=5)\n+        ttk.Entry(coord_frame, textvariable=self.quick_y_var, width=8).grid(row=0, column=2, sticky=(tk.W, tk.E))\n+        \n+        tk.Label(quick_settings_frame, text=\"Enter:\", font=(\"Segoe UI\", 9), \n+                bg=COLORS['light'], fg=COLORS['dark']).grid(row=3, column=0, sticky=tk.W, pady=2)\n+        self.quick_enter_var = tk.BooleanVar()\n+        ttk.Checkbutton(quick_settings_frame, variable=self.quick_enter_var).grid(row=3, column=1, sticky=tk.W, padx=(10, 0), pady=2)\n+        \n+        tk.Label(quick_settings_frame, text=\"Delay:\", font=(\"Segoe UI\", 9), \n+                bg=COLORS['light'], fg=COLORS['dark']).grid(row=4, column=0, sticky=tk.W, pady=2)\n+        self.quick_delay_var = tk.StringVar()\n+        ttk.Entry(quick_settings_frame, textvariable=self.quick_delay_var, width=10).grid(row=4, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)\n+        \n+        # Update button\n+        ttk.Button(quick_settings_frame, text=\"💾 Update Selected\", command=self.update_selected_coordinate, style='Success.TButton').grid(row=5, column=0, columnspan=2, pady=10, sticky=(tk.W, tk.E))\n+        \n+        # Bind tree selection\n+        self.coords_tree.bind('<<TreeviewSelect>>', self.on_coordinate_select)\n+        \n+        self.populate_coordinates()\n+    \n+    def setup_settings_tab(self):\n+        \"\"\"Set up the settings tab with adjustable coordinates\"\"\"\n+        settings_tab = ttk.Frame(self.notebook)\n+        self.notebook.add(settings_tab, text=\"⚙️ Settings\")\n+        settings_tab.columnconfigure(0, weight=1)\n+        settings_tab.rowconfigure(1, weight=1)\n+        \n+        # Title in settings tab with dark text\n+        tk.Label(settings_tab, text=\"⚙️ Coordinate Settings\", font=(\"Segoe UI\", 18, \"bold\"),\n+                bg=COLORS['light'], fg=COLORS['dark']).grid(row=0, column=0, pady=20)\n+        \n+        # Settings frame\n+        settings_frame = ttk.LabelFrame(settings_tab, text=\"Edit Coordinates\", padding=\"15\")\n+        settings_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=20, pady=10)\n+        settings_frame.columnconfigure(0, weight=1)\n+        settings_frame.rowconfigure(0, weight=1)\n+        \n+        # Coordinate editor\n+        self.setup_coordinate_editor(settings_frame)\n+    \n+    def setup_coordinate_editor(self, parent):\n+        \"\"\"Set up the coordinate editor\"\"\"\n+        # Editor treeview\n+        editor_frame = tk.Frame(parent)\n+        editor_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\n+        editor_frame.columnconfigure(0, weight=1)\n+        editor_frame.rowconfigure(0, weight=1)\n+        \n+        columns = (\"Name\", \"X\", \"Y\", \"Press Enter\", \"Delay\")\n+        self.editor_tree = ttk.Treeview(editor_frame, columns=columns, show=\"headings\", height=12)\n+        \n+        for col in columns:\n+            self.editor_tree.heading(col, text=col)\n+            self.editor_tree.column(col, width=150, anchor=\"center\")\n+        \n+        self.editor_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))\n+        \n+        editor_scrollbar = ttk.Scrollbar(editor_frame, orient=\"vertical\", command=self.editor_tree.yview)\n+        editor_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))\n+        self.editor_tree.configure(yscrollcommand=editor_scrollbar.set)\n+        \n+        # Buttons\n+        button_frame = tk.Frame(parent)\n+        button_frame.grid(row=1, column=0, pady=20)\n+        \n+        ttk.Button(button_frame, text=\"➕ Add Coordinate\", command=self.add_coordinate, style='Primary.TButton').grid(row=0, column=0, padx=5)\n+        ttk.Button(button_frame, text=\"✏️ Edit Selected\", command=self.edit_coordinate, style='Primary.TButton').grid(row=0, column=1, padx=5)\n+        ttk.Button(button_frame, text=\"🗑️ Delete Selected\", command=self.delete_coordinate, style='Danger.TButton').grid(row=0, column=2, padx=5)\n+        ttk.Button(button_frame, text=\"💾 Save Changes\", command=self.save_changes, style='Success.TButton').grid(row=0, column=3, padx=5)\n+        \n+        self.populate_editor()\n+    \n+    def setup_logs_tab(self):\n+        \"\"\"Set up the logs tab\"\"\"\n+        logs_tab = ttk.Frame(self.notebook)\n+        self.notebook.add(logs_tab, text=\"📋 Logs\")\n+        logs_tab.columnconfigure(0, weight=1)\n+        logs_tab.rowconfigure(1, weight=1)\n+        \n+        # Header in logs tab with dark text\n+        header_frame = ttk.Frame(logs_tab)\n+        header_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=10, pady=10)\n+        header_frame.columnconfigure(0, weight=1)\n+        \n+        tk.Label(header_frame, text=\"📋 Activity Logs\", font=(\"Segoe UI\", 16, \"bold\"),\n+                bg=COLORS['light'], fg=COLORS['dark']).grid(row=0, column=0, sticky=tk.W)\n+        ttk.Button(header_frame, text=\"Clear Logs\", command=self.clear_logs, style='Primary.TButton').grid(row=0, column=1)\n+        \n+        # Logs\n+        logs_frame = ttk.Frame(logs_tab)\n+        logs_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=10, pady=(0, 10))\n+        logs_frame.columnconfigure(0, weight=1)\n+        logs_frame.rowconfigure(0, weight=1)\n+        \n+        self.logs_text = tk.Text(logs_frame, wrap=tk.WORD, font=(\"Consolas\", 9), state=tk.DISABLED,\n+                                bg='white', fg='#000000', insertbackground='black')\n+        self.logs_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\n+        \n+        logs_scrollbar = ttk.Scrollbar(logs_frame, orient=\"vertical\", command=self.logs_text.yview)\n+        logs_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))\n+        self.logs_text.configure(yscrollcommand=logs_scrollbar.set)\n+        \n+        self.log_message(\"Application started\", \"INFO\")\n+    \n+    def start_auto_refresh(self):\n+        \"\"\"Start automatic clipboard monitoring for new content\"\"\"\n+        def check_clipboard():\n+            if self.auto_refresh_enabled:\n+                self.check_clipboard_for_changes()\n+                # Schedule next check in 2 seconds for less intrusive monitoring\n+                self.clipboard_refresh_timer = self.root.after(2000, check_clipboard)\n+        \n+        # Start the first check after 2 seconds\n+        self.clipboard_refresh_timer = self.root.after(2000, check_clipboard)\n+    \n+    def stop_auto_refresh(self):\n+        \"\"\"Stop automatic clipboard refresh\"\"\"\n+        self.auto_refresh_enabled = False\n+        if self.clipboard_refresh_timer:\n+            self.root.after_cancel(self.clipboard_refresh_timer)\n+    \n+    def toggle_auto_refresh(self):\n+        \"\"\"Toggle automatic clipboard monitoring on/off\"\"\"\n+        if self.auto_refresh_enabled:\n+            self.stop_auto_refresh()\n+            self.auto_refresh_btn.config(text=\"⏰ Auto-Monitor: OFF\")\n+            self.update_status(\"🔄 Clipboard monitoring disabled\", \"warning\")\n+            self.log_message(\"Clipboard monitoring disabled\", \"INFO\")\n+        else:\n+            self.auto_refresh_enabled = True\n+            self.start_auto_refresh()\n+            self.auto_refresh_btn.config(text=\"⏰ Auto-Monitor: ON\")\n+            self.update_status(\"🔄 Clipboard monitoring enabled\", \"success\")\n+            self.log_message(\"Clipboard monitoring enabled\", \"INFO\")\n+    \n+    def populate_coordinates(self):\n+        \"\"\"Populate main coordinates tree\"\"\"\n+        # Clear existing items\n+        for item in self.coords_tree.get_children():\n+            self.coords_tree.delete(item)\n+        \n+        # Configure tag for proper text display\n+        self.coords_tree.tag_configure('coordinate_row', foreground='#000000', font=('Segoe UI', 10))\n+        \n+        # Add coordinates with proper formatting\n+        for i, coord in enumerate(self.coordinates):\n+            # Ensure all values are properly formatted\n+            name = str(coord.get(\"name\", f\"Position {i+1}\"))[:15]  # Limit name length\n+            x_val = str(coord.get(\"x\", 0))\n+            y_val = str(coord.get(\"y\", 0))\n+            enter_val = \"Yes\" if coord.get(\"press_enter_after_paste\", False) else \"No\"\n+            delay_val = f\"{coord.get('delay_after_action', 1.0):.1f}s\"\n+            \n+            self.coords_tree.insert(\"\", \"end\", values=(\n+                name, x_val, y_val, enter_val, delay_val\n+            ), tags=('coordinate_row',))\n+        \n+        # Force refresh\n+        self.coords_tree.update_idletasks()\n+    \n+    def populate_editor(self):\n+        \"\"\"Populate editor tree\"\"\"\n+        for item in self.editor_tree.get_children():\n+            self.editor_tree.delete(item)\n+        \n+        self.editor_tree.tag_configure('black_text', foreground='black')\n+\n+        for coord in self.coordinates:\n+            self.editor_tree.insert(\"\", \"end\", values=(\n+                coord[\"name\"], coord[\"x\"], coord[\"y\"],\n+                \"Yes\" if coord[\"press_enter_after_paste\"] else \"No\",\n+                coord['delay_after_action']\n+            ), tags=('black_text',))\n+    \n+    def add_coordinate(self):\n+        \"\"\"Add new coordinate\"\"\"\n+        self.edit_coordinate_dialog()\n+    \n+    def edit_coordinate(self):\n+        \"\"\"Edit selected coordinate\"\"\"\n+        selection = self.editor_tree.selection()\n+        if not selection:\n+            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to edit.\")\n+            return\n+        \n+        index = self.editor_tree.index(selection[0])\n+        self.edit_coordinate_dialog(index)\n+    \n+    def edit_coordinate_dialog(self, index=None):\n+        \"\"\"Show coordinate edit dialog\"\"\"\n+        dialog = tk.Toplevel(self.root)\n+        dialog.title(\"Edit Coordinate\" if index is not None else \"Add Coordinate\")\n+        dialog.geometry(\"400x320\")\n+        dialog.transient(self.root)\n+        dialog.grab_set()\n+        dialog.configure(bg=COLORS['light'])\n+\n+        # Center dialog\n+        dialog.update_idletasks()\n+        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)\n+        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)\n+        dialog.geometry(f\"+{x}+{y}\")\n+        \n+        # Fields Frame\n+        fields_frame = tk.Frame(dialog, bg=COLORS['light'])\n+        fields_frame.pack(padx=20, pady=20, fill='both', expand=True)\n+\n+        # Fields\n+        ttk.Label(fields_frame, text=\"Name:\", background=COLORS['light'], foreground=COLORS['dark']).grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)\n+        name_var = tk.StringVar(value=self.coordinates[index][\"name\"] if index is not None else \"New Position\")\n+        ttk.Entry(fields_frame, textvariable=name_var, width=30).grid(row=0, column=1, padx=10, pady=5)\n+        \n+        ttk.Label(fields_frame, text=\"X Coordinate:\", background=COLORS['light'], foreground=COLORS['dark']).grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)\n+        x_var = tk.StringVar(value=str(self.coordinates[index][\"x\"]) if index is not None else \"100\")\n+        ttk.Entry(fields_frame, textvariable=x_var, width=30).grid(row=1, column=1, padx=10, pady=5)\n+        \n+        ttk.Label(fields_frame, text=\"Y Coordinate:\", background=COLORS['light'], foreground=COLORS['dark']).grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)\n+        y_var = tk.StringVar(value=str(self.coordinates[index][\"y\"]) if index is not None else \"100\")\n+        ttk.Entry(fields_frame, textvariable=y_var, width=30).grid(row=2, column=1, padx=10, pady=5)\n+        \n+        ttk.Label(fields_frame, text=\"Press Enter:\", background=COLORS['light'], foreground=COLORS['dark']).grid(row=3, column=0, sticky=tk.W, padx=10, pady=5)\n+        enter_var = tk.BooleanVar(value=self.coordinates[index][\"press_enter_after_paste\"] if index is not None else True)\n+        ttk.Checkbutton(fields_frame, variable=enter_var).grid(row=3, column=1, sticky=tk.W, padx=10, pady=5)\n+        \n+        ttk.Label(fields_frame, text=\"Delay (sec):\", background=COLORS['light'], foreground=COLORS['dark']).grid(row=4, column=0, sticky=tk.W, padx=10, pady=5)\n+        delay_var = tk.StringVar(value=str(self.coordinates[index][\"delay_after_action\"]) if index is not None else \"0.5\")\n+        ttk.Entry(fields_frame, textvariable=delay_var, width=30).grid(row=4, column=1, padx=10, pady=5)\n+        \n+        # Get current mouse position button\n+        def get_mouse_pos():\n+            try:\n+                dialog.withdraw()\n+                result = messagebox.askokcancel(\"Get Position\", \n+                    \"1. Position your mouse where you want to capture\\n\"\n+                    \"2. Click OK\\n\" \n+                    \"3. DO NOT move mouse for 3 seconds\\n\\n\"\n+                    \"The position will be captured automatically.\")\n+                \n+                if result:\n+                    time.sleep(3)\n+                    x, y = pyautogui.position()\n+                    x_var.set(str(x))\n+                    y_var.set(str(y))\n+                    dialog.deiconify()\n+                    messagebox.showinfo(\"Success\", f\"Position captured: ({x}, {y})\")\n+                else:\n+                    dialog.deiconify()\n+            except Exception as e:\n+                dialog.deiconify()\n+                messagebox.showerror(\"Error\", f\"Failed to capture position: {str(e)}\")\n+        \n+        ttk.Button(fields_frame, text=\"🎯 Get Current Mouse Position\", command=get_mouse_pos, style='Info.TButton').grid(row=5, column=0, columnspan=2, pady=10)\n+        \n+        # Buttons Frame\n+        button_frame = tk.Frame(dialog, bg=COLORS['light'])\n+        button_frame.pack(pady=10)\n+\n+        # Buttons\n+        def save_coordinate():\n+            try:\n+                coord = {\n+                    \"name\": name_var.get(),\n+                    \"x\": int(x_var.get()),\n+                    \"y\": int(y_var.get()),\n+                    \"press_enter_after_paste\": enter_var.get(),\n+                    \"delay_after_action\": float(delay_var.get())\n+                }\n+                \n+                if index is not None:\n+                    self.coordinates[index] = coord\n+                else:\n+                    self.coordinates.append(coord)\n+                \n+                self.populate_editor()\n+                dialog.destroy()\n+                \n+            except ValueError:\n+                messagebox.showerror(\"Invalid Input\", \"Please enter valid numbers for coordinates and delay.\")\n+        \n+        ttk.Button(button_frame, text=\"💾 Save\", command=save_coordinate, style='Success.TButton').grid(row=0, column=0, padx=5)\n+        ttk.Button(button_frame, text=\"❌ Cancel\", command=dialog.destroy, style='Danger.TButton').grid(row=0, column=1, padx=5)\n+    \n+    def delete_coordinate(self):\n+        \"\"\"Delete selected coordinate\"\"\"\n+        selection = self.editor_tree.selection()\n+        if not selection:\n+            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to delete.\")\n+            return\n+        \n+        if messagebox.askyesno(\"Confirm Delete\", \"Are you sure you want to delete this coordinate?\"):\n+            index = self.editor_tree.index(selection[0])\n+            del self.coordinates[index]\n+            self.populate_editor()\n+    \n+    def save_changes(self):\n+        \"\"\"Save all changes\"\"\"\n+        self.save_coordinates()\n+        self.populate_coordinates()\n+        messagebox.showinfo(\"Saved\", \"Coordinates saved successfully!\")\n+        self.log_message(\"Coordinates configuration saved\", \"INFO\")\n+    \n+    def on_coordinate_select(self, event):\n+        \"\"\"Handle coordinate selection in main tab\"\"\"\n+        selection = self.coords_tree.selection()\n+        if selection:\n+            index = self.coords_tree.index(selection[0])\n+            coord = self.coordinates[index]\n+            \n+            # Update quick settings panel\n+            self.selected_coord_label.config(text=f\"{coord['name']} (#{index+1})\")\n+            self.quick_name_var.set(coord[\"name\"])\n+            self.quick_x_var.set(str(coord[\"x\"]))\n+            self.quick_y_var.set(str(coord[\"y\"]))\n+            self.quick_enter_var.set(coord[\"press_enter_after_paste\"])\n+            self.quick_delay_var.set(str(coord[\"delay_after_action\"]))\n+        else:\n+            self.selected_coord_label.config(text=\"None selected\")\n+            self.quick_name_var.set(\"\")\n+            self.quick_x_var.set(\"\")\n+            self.quick_y_var.set(\"\")\n+            self.quick_enter_var.set(False)\n+            self.quick_delay_var.set(\"\")\n+    \n+    def quick_add_coordinate(self):\n+        \"\"\"Quick add new coordinate\"\"\"\n+        new_coord = {\n+            \"name\": f\"Position {len(self.coordinates) + 1}\",\n+            \"x\": 100,\n+            \"y\": 100,\n+            \"press_enter_after_paste\": True,\n+            \"delay_after_action\": 0.5\n+        }\n+        self.coordinates.append(new_coord)\n+        self.populate_coordinates()\n+        self.save_coordinates()\n+        # Select the new coordinate\n+        children = self.coords_tree.get_children()\n+        if children:\n+            self.coords_tree.selection_set(children[-1])\n+            self.coords_tree.focus(children[-1])\n+        self.log_message(f\"Added new coordinate: {new_coord['name']}\", \"INFO\")\n+    \n+    def quick_edit_coordinate(self):\n+        \"\"\"Quick edit selected coordinate\"\"\"\n+        selection = self.coords_tree.selection()\n+        if not selection:\n+            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to edit.\")\n+            return\n+        \n+        index = self.coords_tree.index(selection[0])\n+        self.edit_coordinate_dialog(index)\n+    \n+    def quick_get_position(self):\n+        \"\"\"Quick get mouse position for selected coordinate\"\"\"\n+        def get_position():\n+            try:\n+                # Hide main window temporarily\n+                self.root.withdraw()\n+                \n+                # Show instruction dialog\n+                result = messagebox.askokcancel(\"Get Position\", \n+                    \"1. Position your mouse where you want to capture\\n\"\n+                    \"2. Click OK\\n\"\n+                    \"3. DO NOT move mouse for 3 seconds\\n\\n\"\n+                    \"The position will be captured automatically.\")\n+                \n+                if result:\n+                    time.sleep(3)\n+                    x, y = pyautogui.position()\n+                    \n+                    # Update the quick settings fields\n+                    self.quick_x_var.set(str(x))\n+                    self.quick_y_var.set(str(y))\n+                    \n+                    # Show main window again\n+                    self.root.deiconify()\n+                    self.root.lift()\n+                    \n+                    # Update status and log\n+                    self.update_status(f\"✅ Position captured: ({x}, {y})\", \"success\")\n+                    self.log_message(f\"Captured position: ({x}, {y})\", \"INFO\")\n+                    \n+                    # If a coordinate is selected, show message about updating\n+                    selection = self.coords_tree.selection()\n+                    if selection:\n+                        messagebox.showinfo(\"Position Captured\", \n+                            f\"Position ({x}, {y}) captured!\\n\\n\"\n+                            \"Click 'Update Selected' to save this position to the selected coordinate.\")\n+                    else:\n+                        messagebox.showinfo(\"Position Captured\", \n+                            f\"Position ({x}, {y}) captured!\\n\\n\"\n+                            \"You can now use 'Add' to create a new coordinate with this position.\")\n+                else:\n+                    # Show main window again if cancelled\n+                    self.root.deiconify()\n+                    self.root.lift()\n+                    \n+            except Exception as e:\n+                # Make sure window is shown again\n+                self.root.deiconify()\n+                self.root.lift()\n+                messagebox.showerror(\"Error\", f\"Failed to capture position: {str(e)}\")\n+                self.log_message(f\"Position capture error: {str(e)}\", \"ERROR\")\n+        \n+        # Run in thread to avoid blocking\n+        thread = threading.Thread(target=get_position)\n+        thread.daemon = True\n+        thread.start()\n+    \n+    def quick_delete_coordinate(self):\n+        \"\"\"Quick delete selected coordinate\"\"\"\n+        selection = self.coords_tree.selection()\n+        if not selection:\n+            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to delete.\")\n+            return\n+        \n+        index = self.coords_tree.index(selection[0])\n+        coord_name = self.coordinates[index][\"name\"]\n+        \n+        if messagebox.askyesno(\"Confirm Delete\", f\"Delete '{coord_name}'?\"):\n+            del self.coordinates[index]\n+            self.populate_coordinates()\n+            self.save_coordinates()\n+            self.log_message(f\"Deleted coordinate: {coord_name}\", \"INFO\")\n+            \n+            # Clear quick settings\n+            self.selected_coord_label.config(text=\"None selected\")\n+            self.quick_name_var.set(\"\")\n+            self.quick_x_var.set(\"\")\n+            self.quick_y_var.set(\"\")\n+            self.quick_enter_var.set(False)\n+            self.quick_delay_var.set(\"\")\n+    \n+    def move_coordinate_up(self):\n+        \"\"\"Move selected coordinate up in the list\"\"\"\n+        selection = self.coords_tree.selection()\n+        if not selection:\n+            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to move.\")\n+            return\n+        \n+        index = self.coords_tree.index(selection[0])\n+        if index == 0:\n+            messagebox.showinfo(\"Cannot Move\", \"This coordinate is already at the top.\")\n+            return\n+        \n+        # Swap coordinates\n+        self.coordinates[index], self.coordinates[index-1] = self.coordinates[index-1], self.coordinates[index]\n+        self.populate_coordinates()\n+        self.save_coordinates()\n+        \n+        # Re-select the moved coordinate\n+        children = self.coords_tree.get_children()\n+        if index-1 < len(children):\n+            self.coords_tree.selection_set(children[index-1])\n+            self.coords_tree.focus(children[index-1])\n+        \n+        self.update_status(f\"✅ Moved '{self.coordinates[index-1]['name']}' up\", \"success\")\n+        self.log_message(f\"Moved coordinate up: {self.coordinates[index-1]['name']}\", \"INFO\")\n+    \n+    def move_coordinate_down(self):\n+        \"\"\"Move selected coordinate down in the list\"\"\"\n+        selection = self.coords_tree.selection()\n+        if not selection:\n+            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to move.\")\n+            return\n+        \n+        index = self.coords_tree.index(selection[0])\n+        if index == len(self.coordinates) - 1:\n+            messagebox.showinfo(\"Cannot Move\", \"This coordinate is already at the bottom.\")\n+            return\n+        \n+        # Swap coordinates\n+        self.coordinates[index], self.coordinates[index+1] = self.coordinates[index+1], self.coordinates[index]\n+        self.populate_coordinates()\n+        self.save_coordinates()\n+        \n+        # Re-select the moved coordinate\n+        children = self.coords_tree.get_children()\n+        if index+1 < len(children):\n+            self.coords_tree.selection_set(children[index+1])\n+            self.coords_tree.focus(children[index+1])\n+        \n+        self.update_status(f\"✅ Moved '{self.coordinates[index+1]['name']}' down\", \"success\")\n+        self.log_message(f\"Moved coordinate down: {self.coordinates[index+1]['name']}\", \"INFO\")\n+    \n+    def show_order_dialog(self):\n+        \"\"\"Show dialog to manually set coordinate order\"\"\"\n+        dialog = tk.Toplevel(self.root)\n+        dialog.title(\"Reorder Coordinates\")\n+        dialog.geometry(\"500x400\")\n+        dialog.transient(self.root)\n+        dialog.grab_set()\n+        dialog.configure(bg=COLORS['light'])\n+        \n+        # Center dialog\n+        dialog.update_idletasks()\n+        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)\n+        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)\n+        dialog.geometry(f\"+{x}+{y}\")\n+        \n+        # Header\n+        header_frame = tk.Frame(dialog, bg=COLORS['primary'], height=60)\n+        header_frame.pack(fill='x', pady=(0, 10))\n+        header_frame.pack_propagate(False)\n+        tk.Label(header_frame, text=\"🔢 Reorder Coordinates\", font=(\"Segoe UI\", 16, \"bold\"),\n+                bg=COLORS['primary'], fg=COLORS['text_on_primary']).pack(expand=True)\n+        \n+        # Instructions\n+        tk.Label(dialog, text=\"Drag and drop or use buttons to reorder:\", \n+                bg=COLORS['light'], fg=COLORS['dark'], font=(\"Segoe UI\", 10)).pack(pady=5)\n+        \n+        # Listbox for reordering\n+        list_frame = tk.Frame(dialog, bg=COLORS['light'])\n+        list_frame.pack(fill='both', expand=True, padx=20, pady=10)\n+        \n+        order_listbox = tk.Listbox(list_frame, font=(\"Segoe UI\", 10), height=12,\n+                                  bg='white', fg=COLORS['dark'], selectbackground=COLORS['info'])\n+        order_listbox.pack(side='left', fill='both', expand=True)\n+        \n+        order_scrollbar = ttk.Scrollbar(list_frame, orient=\"vertical\", command=order_listbox.yview)\n+        order_scrollbar.pack(side='right', fill='y')\n+        order_listbox.configure(yscrollcommand=order_scrollbar.set)\n+        \n+        # Populate listbox\n+        for i, coord in enumerate(self.coordinates):\n+            order_listbox.insert(tk.END, f\"{i+1}. {coord['name']} ({coord['x']}, {coord['y']})\")\n+        \n+        # Buttons for moving\n+        button_frame = tk.Frame(dialog, bg=COLORS['light'])\n+        button_frame.pack(pady=10)\n+        \n+        def move_up():\n+            try:\n+                index = order_listbox.curselection()[0]\n+                if index > 0:\n+                    # Swap in list and coordinates\n+                    order_listbox.insert(index-1, order_listbox.get(index))\n+                    order_listbox.delete(index+1)\n+                    order_listbox.selection_set(index-1)\n+                    \n+                    self.coordinates[index], self.coordinates[index-1] = self.coordinates[index-1], self.coordinates[index]\n+            except IndexError:\n+                messagebox.showwarning(\"No Selection\", \"Please select an item to move.\")\n+        \n+        def move_down():\n+            try:\n+                index = order_listbox.curselection()[0]\n+                if index < order_listbox.size() - 1:\n+                    # Swap in list and coordinates\n+                    order_listbox.insert(index+2, order_listbox.get(index))\n+                    order_listbox.delete(index)\n+                    order_listbox.selection_set(index+1)\n+                    \n+                    self.coordinates[index], self.coordinates[index+1] = self.coordinates[index+1], self.coordinates[index]\n+            except IndexError:\n+                messagebox.showwarning(\"No Selection\", \"Please select an item to move.\")\n+        \n+        def save_order():\n+            self.populate_coordinates()\n+            self.save_coordinates()\n+            self.update_status(\"✅ Coordinate order saved\", \"success\")\n+            self.log_message(\"Coordinate order updated\", \"INFO\")\n+            dialog.destroy()\n+        \n+        ttk.Button(button_frame, text=\"⬆️ Move Up\", command=move_up, style='Info.TButton').pack(side='left', padx=5)\n+        ttk.Button(button_frame, text=\"⬇️ Move Down\", command=move_down, style='Info.TButton').pack(side='left', padx=5)\n+        ttk.Button(button_frame, text=\"💾 Save Order\", command=save_order, style='Success.TButton').pack(side='left', padx=5)\n+        ttk.Button(button_frame, text=\"❌ Cancel\", command=dialog.destroy, style='Danger.TButton').pack(side='left', padx=5)\n+    \n+    def update_selected_coordinate(self):\n+        \"\"\"Update the selected coordinate with quick settings values\"\"\"\n+        selection = self.coords_tree.selection()\n+        if not selection:\n+            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to update.\")\n+            return\n+        \n+        try:\n+            index = self.coords_tree.index(selection[0])\n+            \n+            # Validate inputs\n+            name = self.quick_name_var.get().strip()\n+            x = int(self.quick_x_var.get())\n+            y = int(self.quick_y_var.get())\n+            delay = float(self.quick_delay_var.get())\n+            \n+            if not name:\n+                messagebox.showerror(\"Invalid Input\", \"Name cannot be empty.\")\n+                return\n+            \n+            # Update coordinate\n+            self.coordinates[index] = {\n+                \"name\": name,\n+                \"x\": x,\n+                \"y\": y,\n+                \"press_enter_after_paste\": self.quick_enter_var.get(),\n+                \"delay_after_action\": delay\n+            }\n+            \n+            self.populate_coordinates()\n+            self.save_coordinates()\n+            \n+            # Re-select the updated coordinate\n+            children = self.coords_tree.get_children()\n+            if index < len(children):\n+                self.coords_tree.selection_set(children[index])\n+                self.coords_tree.focus(children[index])\n+            \n+            self.update_status(f\"✅ Updated '{name}'\", \"success\")\n+            self.log_message(f\"Updated coordinate: {name} at ({x}, {y})\", \"INFO\")\n+            \n+        except ValueError as e:\n+            messagebox.showerror(\"Invalid Input\", \"Please enter valid numbers for coordinates and delay.\")\n+        except Exception as e:\n+            messagebox.showerror(\"Error\", f\"Failed to update coordinate: {str(e)}\")\n+    \n+    def check_clipboard_for_changes(self):\n+        \"\"\"Check if clipboard content has changed and update if so\"\"\"\n+        try:\n+            clipboard_content = pyperclip.paste()\n+            \n+            # Skip if clipboard contains JSON (likely from our own config)\n+            if clipboard_content.strip().startswith('{') or clipboard_content.strip().startswith('['):\n+                try:\n+                    import json\n+                    json.loads(clipboard_content)\n+                    # If it's valid JSON, probably our config - skip\n+                    return\n+                except:\n+                    pass  # Not JSON, continue normally\n+            \n+            # More robust change detection - avoid false positives\n+            if clipboard_content != self.last_clipboard_content:\n+                # Don't update if new content is empty and we had content before\n+                # (this prevents losing content due to clipboard clearing)\n+                if not clipboard_content.strip() and self.last_clipboard_content.strip():\n+                    return\n+                \n+                # Don't update if the change is just whitespace differences\n+                if clipboard_content.strip() == self.last_clipboard_content.strip() and self.last_clipboard_content:\n+                    return\n+                \n+                # Only update if there's a meaningful change\n+                if len(clipboard_content.strip()) > 0 or not self.last_clipboard_content:\n+                    self.last_clipboard_content = clipboard_content\n+                    self.update_clipboard_display(clipboard_content)\n+                \n+        except Exception as e:\n+            # Silently handle clipboard access errors to avoid spam\n+            pass\n+\n+    def update_clipboard_display(self, clipboard_content):\n+        \"\"\"Update the clipboard display with new content\"\"\"\n+        try:\n+            self.clipboard_text.config(state='normal')\n+            self.clipboard_text.delete(1.0, tk.END)\n+            \n+            # Add timestamp and content\n+            import datetime\n+            timestamp = datetime.datetime.now().strftime(\"%H:%M:%S\")\n+            header = f\"🕒 Content updated: {timestamp}\\n\" + \"=\"*50 + \"\\n\"\n+            \n+            # Show full clipboard content (no truncation)\n+            display_content = clipboard_content\n+            \n+            self.clipboard_text.insert(1.0, header + display_content)\n+            \n+            # Configure proper text styling\n+            self.clipboard_text.tag_add(\"black_text\", \"1.0\", tk.END)\n+            self.clipboard_text.tag_configure(\"black_text\", foreground=\"#000000\", font=(\"Cascadia Code\", 11))\n+            self.clipboard_text.config(state='disabled', fg='#000000')\n+            \n+            # Show success message briefly\n+            self.update_status(\"✅ Clipboard content updated\", \"success\")\n+            self.log_message(f\"Clipboard content updated - {len(clipboard_content)} characters\", \"INFO\")\n+            \n+        except Exception as e:\n+            self.update_status(f\"❌ Clipboard Display Error: {str(e)}\", \"error\")\n+            self.log_message(f\"Clipboard display error: {str(e)}\", \"ERROR\")\n+\n+    def refresh_clipboard(self):\n+        \"\"\"Manually refresh clipboard display (force update)\"\"\"\n+        try:\n+            clipboard_content = pyperclip.paste()\n+            \n+            # Skip if clipboard contains JSON (likely from our own config)\n+            if clipboard_content.strip().startswith('{') or clipboard_content.strip().startswith('['):\n+                try:\n+                    import json\n+                    json.loads(clipboard_content)\n+                    # If it's valid JSON, probably our config - get real clipboard\n+                    clipboard_content = \"No text in clipboard (contains data/JSON)\"\n+                except:\n+                    pass  # Not JSON, continue normally\n+            \n+            # Force update regardless of whether content changed\n+            self.last_clipboard_content = clipboard_content\n+            self.clipboard_text.config(state='normal')\n+            self.clipboard_text.delete(1.0, tk.END)\n+            \n+            # Add timestamp and content\n+            import datetime\n+            timestamp = datetime.datetime.now().strftime(\"%H:%M:%S\")\n+            header = f\"🕒 Manually refreshed: {timestamp}\\n\" + \"=\"*50 + \"\\n\"\n+            \n+            # Show full clipboard content (no truncation)\n+            display_content = clipboard_content\n+            \n+            self.clipboard_text.insert(1.0, header + display_content)\n+            \n+            # Configure proper text styling\n+            self.clipboard_text.tag_add(\"black_text\", \"1.0\", tk.END)\n+            self.clipboard_text.tag_configure(\"black_text\", foreground=\"#000000\", font=(\"Cascadia Code\", 11))\n+            self.clipboard_text.config(state='disabled', fg='#000000')\n+            \n+            # Show success message briefly\n+            self.update_status(\"✅ Clipboard manually refreshed\", \"success\")\n+            self.log_message(f\"Clipboard manually refreshed - {len(clipboard_content)} characters\", \"INFO\")\n+        except Exception as e:\n+            self.update_status(f\"❌ Clipboard Error: {str(e)}\", \"error\")\n+            self.log_message(f\"Clipboard refresh error: {str(e)}\", \"ERROR\")\n+    \n+    def update_status(self, message, status_type=\"info\"):\n+        \"\"\"Update status with colors\"\"\"\n+        colors = {'success': COLORS['success'], 'error': COLORS['danger'], 'warning': COLORS['warning'], 'info': COLORS['info']}\n+        color = colors.get(status_type, COLORS['secondary'])\n+        self.status_container.config(bg=color)\n+        self.status_label.config(text=message, bg=color, fg=COLORS['dark'])\n+    \n+    def log_message(self, message, level=\"INFO\"):\n+        \"\"\"Add message to logs\"\"\"\n+        import datetime\n+        timestamp = datetime.datetime.now().strftime(\"%H:%M:%S\")\n+        log_entry = f\"[{timestamp}] {level}: {message}\\n\"\n+        \n+        # Only log if logs_text widget exists (logs tab has been created)\n+        if hasattr(self, 'logs_text') and self.logs_text:\n+            self.logs_text.config(state=tk.NORMAL)\n+            self.logs_text.insert(tk.END, log_entry)\n+            self.logs_text.see(tk.END)\n+            self.logs_text.config(state=tk.DISABLED)\n+    \n+    def clear_logs(self):\n+        \"\"\"Clear all logs\"\"\"\n+        self.logs_text.config(state=tk.NORMAL)\n+        self.logs_text.delete(1.0, tk.END)\n+        self.logs_text.config(state=tk.DISABLED)\n+        self.log_message(\"Logs cleared\", \"INFO\")\n+    \n+    def submit_action(self):\n+        \"\"\"Start the sequence\"\"\"\n+        if self.is_running:\n+            return\n+        \n+        try:\n+            self.sequence_clipboard_content = pyperclip.paste()\n+            if not self.sequence_clipboard_content.strip():\n+                messagebox.showwarning(\"Empty Clipboard\", \"Please copy some text first.\")\n+                return\n+        except Exception as e:\n+            messagebox.showerror(\"Clipboard Error\", f\"Error: {str(e)}\")\n+            return\n+        \n+        self.is_running = True\n+        self.submit_btn.config(state=\"disabled\")\n+        self.stop_btn.config(state=\"normal\")\n+        self.start_time = time.time()\n+        self.completed_count = 0\n+        \n+        self.log_message(f\"Starting sequence with {len(self.coordinates)} coordinates\", \"INFO\")\n+        \n+        self.current_thread = threading.Thread(target=self.execute_sequence)\n+        self.current_thread.daemon = True\n+        self.current_thread.start()\n+    \n+    def stop_action(self):\n+        \"\"\"Stop the sequence\"\"\"\n+        self.is_running = False\n+        self.submit_btn.config(state=\"normal\")\n+        self.stop_btn.config(state=\"disabled\")\n+        self.update_status(\"🛑 Sequence stopped\", \"warning\")\n+        self.log_message(\"Sequence stopped by user\", \"WARNING\")\n+    \n+    def execute_sequence(self):\n+        \"\"\"Execute the pasting sequence\"\"\"\n+        try:\n+            total_coords = len(self.coordinates)\n+            self.progress.config(maximum=total_coords)\n+            \n+            # Initial delay\n+            for i in range(3, 0, -1):\n+                if not self.is_running:\n+                    return\n+                self.update_status(f\"⏳ Starting in {i} seconds...\", \"warning\")\n+                time.sleep(1)\n+            \n+            # Process each coordinate\n+            for index, coord in enumerate(self.coordinates):\n+                if not self.is_running:\n+                    return\n+                \n+                self.update_status(f\"🔄 Processing {coord['name']} ({index+1}/{total_coords})\", \"info\")\n+                self.log_message(f\"Processing {coord['name']} at ({coord['x']}, {coord['y']})\", \"INFO\")\n+                \n+                # Move and click\n+                pyautogui.moveTo(coord[\"x\"], coord[\"y\"], duration=0.5)\n+                pyautogui.click(coord[\"x\"], coord[\"y\"])\n+                time.sleep(0.2)\n+                \n+                # Restore clipboard content before pasting\n+                pyperclip.copy(self.sequence_clipboard_content)\n+                time.sleep(0.1) # Brief pause for clipboard to settle\n+\n+                # Paste\n+                pyautogui.hotkey('ctrl', 'v')\n+                \n+                # Press Enter if configured\n+                if coord[\"press_enter_after_paste\"]:\n+                    time.sleep(0.1)\n+                    pyautogui.press('enter')\n+                    self.log_message(f\"Pressed Enter after pasting at {coord['name']}\", \"DEBUG\")\n+                \n+                self.completed_count += 1\n+                self.progress.config(value=index + 1)\n+                self.log_message(f\"Completed {coord['name']}\", \"SUCCESS\")\n+                \n+                # Wait before next\n+                if index < total_coords - 1:\n+                    delay = coord[\"delay_after_action\"]\n+                    for i in range(int(delay * 10)):\n+                        if not self.is_running:\n+                            return\n+                        time.sleep(0.1)\n+            \n+            if self.is_running:\n+                total_time = int(time.time() - self.start_time)\n+                self.update_status(f\"✅ Completed! {total_coords} locations in {total_time}s\", \"success\")\n+                self.log_message(f\"Sequence completed in {total_time} seconds\", \"SUCCESS\")\n+        \n+        except Exception as e:\n+            self.update_status(f\"❌ Error: {str(e)}\", \"error\")\n+            self.log_message(f\"Error: {str(e)}\", \"ERROR\")\n+        \n+        finally:\n+            self.is_running = False\n+            self.submit_btn.config(state=\"normal\")\n+            self.stop_btn.config(state=\"disabled\")\n+\n+def main():\n+    pyautogui.FAILSAFE = True\n+    pyautogui.PAUSE = 0.05\n+    \n+    root = tk.Tk()\n+    app = MultiCoordinatesClicker(root)\n+    \n+    # Center window\n+    root.update_idletasks()\n+    x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)\n+    y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)\n+    root.geometry(f\"+{x}+{y}\")\n+    \n+    # Handle window close event\n+    def on_closing():\n+        app.stop_auto_refresh()\n+        root.destroy()\n+    \n+    root.protocol(\"WM_DELETE_WINDOW\", on_closing)\n+    root.mainloop()\n+\n+if __name__ == \"__main__\":\n     main() \n\\ No newline at end of file\n"
                },
                {
                    "date": 1749631592529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1228,8 +1228,14 @@\n     \n     # Handle window close event\n     def on_closing():\n         app.stop_auto_refresh()\n+        # Clean up temporary icon file\n+        try:\n+            if os.path.exists(\"temp_app_icon.ico\"):\n+                os.remove(\"temp_app_icon.ico\")\n+        except:\n+            pass\n         root.destroy()\n     \n     root.protocol(\"WM_DELETE_WINDOW\", on_closing)\n     root.mainloop()\n"
                }
            ],
            "date": 1749308772268,
            "name": "Commit-0",
            "content": "import tkinter as tk\r\nfrom tkinter import ttk, messagebox\r\nimport pyautogui\r\nimport pyperclip\r\nimport time\r\nimport threading\r\nimport json\r\nimport os\r\n\r\n# Global color scheme - Modern dark theme with good contrast\r\nCOLORS = {\r\n    'primary': '#2C3E50',      # Dark blue-gray for headers\r\n    'secondary': '#34495E',    # Slightly lighter for secondary elements\r\n    'success': '#27AE60',      # Green for success actions\r\n    'danger': '#E74C3C',       # Red for danger actions\r\n    'warning': '#F39C12',      # Orange for warnings\r\n    'info': '#3498DB',         # Blue for info\r\n    'light': '#ECF0F1',        # Light gray for backgrounds\r\n    'dark': '#000000',         # Dark for text\r\n    'accent': '#16A085',       # Teal for accents\r\n    'bg': '#FFFFFF',           # White background\r\n    'text': '#000000',         # Dark text for contrast\r\n    'text_on_primary': '#FFFFFF' # White text for use on dark backgrounds like primary color\r\n}\r\n\r\nclass MultiCoordinatesClicker:\r\n    def __init__(self, root):\r\n        self.root = root\r\n        self.root.title(\"🚀 Multi Coordinates Clicker - Enhanced\")\r\n        self.root.geometry(\"1800x700\")\r\n        self.root.resizable(True, True)\r\n        \r\n        # Configure modern styling\r\n        self.setup_modern_style()\r\n        self.root.configure(bg=COLORS['light'])\r\n        \r\n        # Initialize variables\r\n        self.is_running = False\r\n        self.current_thread = None\r\n        self.start_time = None\r\n        self.completed_count = 0\r\n        self.auto_refresh_enabled = True\r\n        self.clipboard_refresh_timer = None\r\n        \r\n        # Load or create default coordinates\r\n        self.coordinates = self.load_coordinates()\r\n        \r\n        self.setup_ui()\r\n        \r\n        # Start auto-refresh clipboard\r\n        self.start_auto_refresh()\r\n        \r\n    def load_coordinates(self):\r\n        \"\"\"Load coordinates from config file or create defaults\"\"\"\r\n        try:\r\n            if os.path.exists('coordinates_config.json'):\r\n                with open('coordinates_config.json', 'r') as f:\r\n                    return json.load(f)\r\n        except:\r\n            pass\r\n        \r\n        # Default coordinates\r\n        return [\r\n            {\"name\": \"Position 1\", \"x\": 100, \"y\": 200, \"press_enter_after_paste\": True, \"delay_after_action\": 1.0},\r\n            {\"name\": \"Position 2\", \"x\": 300, \"y\": 400, \"press_enter_after_paste\": False, \"delay_after_action\": 1.5},\r\n            {\"name\": \"Position 3\", \"x\": 500, \"y\": 300, \"press_enter_after_paste\": True, \"delay_after_action\": 2.0}\r\n        ]\r\n    \r\n    def save_coordinates(self):\r\n        \"\"\"Save coordinates to config file\"\"\"\r\n        try:\r\n            with open('coordinates_config.json', 'w') as f:\r\n                json.dump(self.coordinates, f, indent=2)\r\n        except Exception as e:\r\n            messagebox.showerror(\"Save Error\", f\"Could not save coordinates: {str(e)}\")\r\n    \r\n    def setup_modern_style(self):\r\n        \"\"\"Configure modern visual styling\"\"\"\r\n        style = ttk.Style()\r\n        \r\n        # Configure notebook with better contrast\r\n        style.configure('Modern.TNotebook', background=COLORS['light'], borderwidth=0)\r\n        style.configure('Modern.TNotebook.Tab', padding=[20, 12], font=('Segoe UI', 11, 'bold'),\r\n                       background=COLORS['light'], foreground=COLORS['dark'])\r\n        style.map('Modern.TNotebook.Tab', \r\n                 background=[('selected', COLORS['info'])],\r\n                 foreground=[('selected', COLORS['dark'])])\r\n        \r\n        # Configure buttons with proper contrast - ensuring all text is dark/black\r\n        style.configure('Success.TButton', font=('Segoe UI', 14, 'bold'), padding=[25, 15],\r\n                       background=COLORS['success'], foreground=COLORS['dark'], borderwidth=2, relief='raised')\r\n        style.configure('Danger.TButton', font=('Segoe UI', 12, 'bold'), padding=[20, 10],\r\n                       background=COLORS['danger'], foreground=COLORS['dark'], borderwidth=2, relief='raised')\r\n        style.configure('Primary.TButton', font=('Segoe UI', 12, 'bold'), padding=[20, 10],\r\n                       background=COLORS['primary'], foreground=COLORS['dark'], borderwidth=2, relief='raised')\r\n        style.configure('Info.TButton', font=('Segoe UI', 12, 'bold'), padding=[20, 10],\r\n                       background=COLORS['info'], foreground=COLORS['dark'], borderwidth=2, relief='raised')\r\n        \r\n        # Map button states for better interaction feedback\r\n        for btn_style in ['Success.TButton', 'Danger.TButton', 'Primary.TButton', 'Info.TButton']:\r\n            style.map(btn_style,\r\n                     relief=[('pressed', 'sunken'), ('active', 'raised')],\r\n                     background=[('active', COLORS['accent'])],\r\n                     foreground=[('active', COLORS['dark'])])\r\n        \r\n        # Configure treeview with readable colors\r\n        style.configure('Modern.Treeview', background=COLORS['bg'], foreground=COLORS['dark'],\r\n                       font=('Segoe UI', 10), fieldbackground=COLORS['bg'], borderwidth=1)\r\n        style.configure('Modern.Treeview.Heading', background=COLORS['light'], foreground=COLORS['dark'],\r\n                       font=('Segoe UI', 11, 'bold'), relief='raised', borderwidth=1)\r\n        \r\n        # Configure entry and other widgets\r\n        style.configure('TEntry', fieldbackground='white', borderwidth=2, relief='solid', foreground=COLORS['dark'])\r\n        style.configure('TLabelframe', background=COLORS['light'], foreground=COLORS['dark'],\r\n                       borderwidth=2, relief='solid')\r\n        style.configure('TLabelframe.Label', background=COLORS['light'], foreground=COLORS['dark'],\r\n                       font=('Segoe UI', 11, 'bold'))\r\n    \r\n    def setup_ui(self):\r\n        \"\"\"Set up the user interface\"\"\"\r\n        # Configure root grid\r\n        self.root.columnconfigure(0, weight=1)\r\n        self.root.rowconfigure(0, weight=1)\r\n        \r\n        # Main notebook\r\n        self.notebook = ttk.Notebook(self.root, style='Modern.TNotebook')\r\n        self.notebook.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=15, pady=15)\r\n        \r\n        # Create tabs\r\n        self.setup_main_tab()\r\n        self.setup_settings_tab()\r\n        self.setup_logs_tab()\r\n        \r\n        # Initialize clipboard after all tabs are created\r\n        self.refresh_clipboard()\r\n    \r\n    def setup_main_tab(self):\r\n        \"\"\"Set up the main control tab\"\"\"\r\n        main_tab = ttk.Frame(self.notebook)\r\n        self.notebook.add(main_tab, text=\"🎯 Main Control\")\r\n        main_tab.columnconfigure(0, weight=1)\r\n        main_tab.columnconfigure(1, weight=1)\r\n        main_tab.rowconfigure(1, weight=1)\r\n        \r\n        # Title with better contrast\r\n        title_frame = tk.Frame(main_tab, bg=COLORS['primary'], height=80)\r\n        title_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))\r\n        title_frame.grid_propagate(False)\r\n        title_frame.columnconfigure(0, weight=1)\r\n        \r\n        tk.Label(title_frame, text=\"🚀 Multi Coordinates Clicker - Enhanced\", \r\n                font=(\"Segoe UI\", 22, \"bold\"), bg=COLORS['primary'], fg=COLORS['text_on_primary']).grid(row=0, column=0, pady=10)\r\n        tk.Label(title_frame, text=\"✨ Automated clipboard pasting with adjustable settings ✨\",\r\n                font=(\"Segoe UI\", 12), bg=COLORS['primary'], fg=COLORS['text_on_primary']).grid(row=1, column=0)\r\n        \r\n        # Left panel\r\n        left_frame = ttk.LabelFrame(main_tab, text=\"📋 Clipboard & Control\", padding=\"15\")\r\n        left_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(15, 8), pady=5)\r\n        left_frame.columnconfigure(0, weight=1)\r\n        left_frame.rowconfigure(1, weight=1)\r\n        \r\n        # Clipboard\r\n        clipboard_header = tk.Frame(left_frame, bg=COLORS['info'], height=35)\r\n        clipboard_header.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))\r\n        clipboard_header.grid_propagate(False)\r\n        tk.Label(clipboard_header, text=\"📝 Current Clipboard Content\", \r\n                font=(\"Segoe UI\", 12, \"bold\"), background=COLORS['info'], foreground=COLORS['dark']).grid(row=0, column=0, padx=10, pady=5)\r\n        \r\n        self.clipboard_text = tk.Text(left_frame, height=8, wrap=tk.WORD, font=(\"Cascadia Code\", 11),\r\n                                     bg=COLORS['bg'], fg=COLORS['dark'], relief='flat', borderwidth=2,\r\n                                     insertbackground=COLORS['dark'], selectbackground=COLORS['info'], selectforeground=COLORS['dark'])\r\n        self.clipboard_text.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)\r\n        \r\n        # Configure black text tag for clipboard\r\n        self.clipboard_text.tag_configure(\"black_text\", foreground=\"#000000\", font=(\"Cascadia Code\", 11))\r\n        \r\n        scrollbar = ttk.Scrollbar(left_frame, orient=\"vertical\", command=self.clipboard_text.yview)\r\n        scrollbar.grid(row=1, column=1, sticky=(tk.N, tk.S))\r\n        self.clipboard_text.configure(yscrollcommand=scrollbar.set)\r\n        \r\n        # Control buttons with better styling\r\n        control_frame = tk.Frame(left_frame, bg=COLORS['light'])\r\n        control_frame.grid(row=2, column=0, columnspan=2, pady=15, sticky=(tk.W, tk.E))\r\n        control_frame.columnconfigure(0, weight=1)\r\n        control_frame.columnconfigure(1, weight=1)\r\n        control_frame.columnconfigure(2, weight=1)\r\n        \r\n        # First row of buttons\r\n        ttk.Button(control_frame, text=\"🔄 Refresh Now\", command=self.refresh_clipboard, style='Info.TButton').grid(row=0, column=0, padx=3, pady=3, sticky=(tk.W, tk.E))\r\n        self.auto_refresh_btn = ttk.Button(control_frame, text=\"⏰ Auto-Refresh: ON\", command=self.toggle_auto_refresh, style='Info.TButton')\r\n        self.auto_refresh_btn.grid(row=0, column=1, padx=3, pady=3, sticky=(tk.W, tk.E))\r\n        \r\n        # Second row of buttons\r\n        self.submit_btn = ttk.Button(control_frame, text=\"🚀 START SEQUENCE\", command=self.submit_action, style=\"Success.TButton\")\r\n        self.submit_btn.grid(row=1, column=0, columnspan=2, padx=3, pady=3, sticky=(tk.W, tk.E))\r\n        self.stop_btn = ttk.Button(control_frame, text=\"🛑 STOP\", command=self.stop_action, style=\"Danger.TButton\", state=\"disabled\")\r\n        self.stop_btn.grid(row=1, column=2, padx=3, pady=3, sticky=(tk.W, tk.E))\r\n        \r\n        # Status\r\n        status_frame = tk.Frame(left_frame, bg=COLORS['light'])\r\n        status_frame.grid(row=3, column=0, columnspan=2, pady=15, sticky=(tk.W, tk.E))\r\n        status_frame.columnconfigure(0, weight=1)\r\n        \r\n        self.status_container = tk.Frame(status_frame, bg=COLORS['success'], relief='solid', bd=2)\r\n        self.status_container.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))\r\n        self.status_container.columnconfigure(0, weight=1)\r\n        \r\n        self.status_label = tk.Label(self.status_container, text=\"✅ Ready - Click START SEQUENCE to begin\", \r\n                                    bg=COLORS['success'], fg=COLORS['dark'], font=(\"Segoe UI\", 11, \"bold\"), pady=8)\r\n        self.status_label.grid(row=0, column=0, sticky=(tk.W, tk.E))\r\n        \r\n        self.progress = ttk.Progressbar(status_frame, mode='determinate')\r\n        self.progress.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=3)\r\n        \r\n        # Right panel\r\n        right_frame = ttk.LabelFrame(main_tab, text=\"🎯 Configured Coordinates\", padding=\"15\")\r\n        right_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(8, 15), pady=5)\r\n        right_frame.columnconfigure(0, weight=1)\r\n        right_frame.rowconfigure(0, weight=1)\r\n        \r\n        # Treeview with inline editing\r\n        columns = (\"Name\", \"X\", \"Y\", \"Press Enter\", \"Delay\")\r\n        self.coords_tree = ttk.Treeview(right_frame, columns=columns, show=\"headings\", height=12, style='Modern.Treeview')\r\n        \r\n        for col in columns:\r\n            self.coords_tree.heading(col, text=col)\r\n            self.coords_tree.column(col, width=120, anchor=\"center\")\r\n        \r\n        self.coords_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\r\n        \r\n        tree_scrollbar = ttk.Scrollbar(right_frame, orient=\"vertical\", command=self.coords_tree.yview)\r\n        tree_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))\r\n        self.coords_tree.configure(yscrollcommand=tree_scrollbar.set)\r\n        \r\n        # Quick edit buttons\r\n        edit_buttons_frame = tk.Frame(right_frame, bg=COLORS['light'])\r\n        edit_buttons_frame.grid(row=1, column=0, columnspan=2, pady=10, sticky=(tk.W, tk.E))\r\n        edit_buttons_frame.columnconfigure(0, weight=1)\r\n        edit_buttons_frame.columnconfigure(1, weight=1)\r\n        edit_buttons_frame.columnconfigure(2, weight=1)\r\n        edit_buttons_frame.columnconfigure(3, weight=1)\r\n        edit_buttons_frame.columnconfigure(4, weight=1)\r\n        edit_buttons_frame.columnconfigure(5, weight=1)\r\n        \r\n        # First row - basic operations\r\n        ttk.Button(edit_buttons_frame, text=\"➕ Add\", command=self.quick_add_coordinate, style='Primary.TButton').grid(row=0, column=0, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n        ttk.Button(edit_buttons_frame, text=\"✏️ Edit\", command=self.quick_edit_coordinate, style='Primary.TButton').grid(row=0, column=1, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n        ttk.Button(edit_buttons_frame, text=\"🎯 Get Pos\", command=self.quick_get_position, style='Primary.TButton').grid(row=0, column=2, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n        ttk.Button(edit_buttons_frame, text=\"🗑️ Delete\", command=self.quick_delete_coordinate, style='Danger.TButton').grid(row=0, column=3, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n        \r\n        # Second row - ordering operations\r\n        ttk.Button(edit_buttons_frame, text=\"⬆️ Up\", command=self.move_coordinate_up, style='Info.TButton').grid(row=1, column=0, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n        ttk.Button(edit_buttons_frame, text=\"⬇️ Down\", command=self.move_coordinate_down, style='Info.TButton').grid(row=1, column=1, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n        ttk.Button(edit_buttons_frame, text=\"🔢 Order\", command=self.show_order_dialog, style='Info.TButton').grid(row=1, column=2, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n        ttk.Button(edit_buttons_frame, text=\"💾 Save\", command=self.save_coordinates, style='Success.TButton').grid(row=1, column=3, padx=1, pady=2, sticky=(tk.W, tk.E))\r\n        \r\n        # Quick settings panel with better colors\r\n        quick_settings_frame = ttk.LabelFrame(right_frame, text=\"⚡ Quick Settings\", padding=\"10\")\r\n        quick_settings_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=10)\r\n        quick_settings_frame.columnconfigure(1, weight=1)\r\n        \r\n        # Selected coordinate info with dark text\r\n        tk.Label(quick_settings_frame, text=\"Selected:\", font=(\"Segoe UI\", 10, \"bold\"), \r\n                bg=COLORS['light'], fg=COLORS['dark']).grid(row=0, column=0, sticky=tk.W)\r\n        self.selected_coord_label = tk.Label(quick_settings_frame, text=\"None selected\", \r\n                                           bg=COLORS['light'], fg=COLORS['info'], font=(\"Segoe UI\", 10))\r\n        self.selected_coord_label.grid(row=0, column=1, sticky=tk.W, padx=(10, 0))\r\n        \r\n        # Quick edit fields labels with dark text\r\n        tk.Label(quick_settings_frame, text=\"Name:\", font=(\"Segoe UI\", 9), \r\n                bg=COLORS['light'], fg=COLORS['dark']).grid(row=1, column=0, sticky=tk.W, pady=2)\r\n        self.quick_name_var = tk.StringVar()\r\n        self.quick_name_entry = ttk.Entry(quick_settings_frame, textvariable=self.quick_name_var, width=20)\r\n        self.quick_name_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)\r\n        \r\n        tk.Label(quick_settings_frame, text=\"X, Y:\", font=(\"Segoe UI\", 9), \r\n                bg=COLORS['light'], fg=COLORS['dark']).grid(row=2, column=0, sticky=tk.W, pady=2)\r\n        coord_frame = tk.Frame(quick_settings_frame, bg=COLORS['light'])\r\n        coord_frame.grid(row=2, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)\r\n        coord_frame.columnconfigure(0, weight=1)\r\n        coord_frame.columnconfigure(2, weight=1)\r\n        \r\n        self.quick_x_var = tk.StringVar()\r\n        self.quick_y_var = tk.StringVar()\r\n        ttk.Entry(coord_frame, textvariable=self.quick_x_var, width=8).grid(row=0, column=0, sticky=(tk.W, tk.E))\r\n        tk.Label(coord_frame, text=\",\", bg=COLORS['light'], fg=COLORS['dark']).grid(row=0, column=1, padx=5)\r\n        ttk.Entry(coord_frame, textvariable=self.quick_y_var, width=8).grid(row=0, column=2, sticky=(tk.W, tk.E))\r\n        \r\n        tk.Label(quick_settings_frame, text=\"Enter:\", font=(\"Segoe UI\", 9), \r\n                bg=COLORS['light'], fg=COLORS['dark']).grid(row=3, column=0, sticky=tk.W, pady=2)\r\n        self.quick_enter_var = tk.BooleanVar()\r\n        ttk.Checkbutton(quick_settings_frame, variable=self.quick_enter_var).grid(row=3, column=1, sticky=tk.W, padx=(10, 0), pady=2)\r\n        \r\n        tk.Label(quick_settings_frame, text=\"Delay:\", font=(\"Segoe UI\", 9), \r\n                bg=COLORS['light'], fg=COLORS['dark']).grid(row=4, column=0, sticky=tk.W, pady=2)\r\n        self.quick_delay_var = tk.StringVar()\r\n        ttk.Entry(quick_settings_frame, textvariable=self.quick_delay_var, width=10).grid(row=4, column=1, sticky=(tk.W, tk.E), padx=(10, 0), pady=2)\r\n        \r\n        # Update button\r\n        ttk.Button(quick_settings_frame, text=\"💾 Update Selected\", command=self.update_selected_coordinate, style='Success.TButton').grid(row=5, column=0, columnspan=2, pady=10, sticky=(tk.W, tk.E))\r\n        \r\n        # Bind tree selection\r\n        self.coords_tree.bind('<<TreeviewSelect>>', self.on_coordinate_select)\r\n        \r\n        self.populate_coordinates()\r\n    \r\n    def setup_settings_tab(self):\r\n        \"\"\"Set up the settings tab with adjustable coordinates\"\"\"\r\n        settings_tab = ttk.Frame(self.notebook)\r\n        self.notebook.add(settings_tab, text=\"⚙️ Settings\")\r\n        settings_tab.columnconfigure(0, weight=1)\r\n        settings_tab.rowconfigure(1, weight=1)\r\n        \r\n        # Title in settings tab with dark text\r\n        tk.Label(settings_tab, text=\"⚙️ Coordinate Settings\", font=(\"Segoe UI\", 18, \"bold\"),\r\n                bg=COLORS['light'], fg=COLORS['dark']).grid(row=0, column=0, pady=20)\r\n        \r\n        # Settings frame\r\n        settings_frame = ttk.LabelFrame(settings_tab, text=\"Edit Coordinates\", padding=\"15\")\r\n        settings_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=20, pady=10)\r\n        settings_frame.columnconfigure(0, weight=1)\r\n        settings_frame.rowconfigure(0, weight=1)\r\n        \r\n        # Coordinate editor\r\n        self.setup_coordinate_editor(settings_frame)\r\n    \r\n    def setup_coordinate_editor(self, parent):\r\n        \"\"\"Set up the coordinate editor\"\"\"\r\n        # Editor treeview\r\n        editor_frame = tk.Frame(parent)\r\n        editor_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\r\n        editor_frame.columnconfigure(0, weight=1)\r\n        editor_frame.rowconfigure(0, weight=1)\r\n        \r\n        columns = (\"Name\", \"X\", \"Y\", \"Press Enter\", \"Delay\")\r\n        self.editor_tree = ttk.Treeview(editor_frame, columns=columns, show=\"headings\", height=12)\r\n        \r\n        for col in columns:\r\n            self.editor_tree.heading(col, text=col)\r\n            self.editor_tree.column(col, width=150, anchor=\"center\")\r\n        \r\n        self.editor_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))\r\n        \r\n        editor_scrollbar = ttk.Scrollbar(editor_frame, orient=\"vertical\", command=self.editor_tree.yview)\r\n        editor_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))\r\n        self.editor_tree.configure(yscrollcommand=editor_scrollbar.set)\r\n        \r\n        # Buttons\r\n        button_frame = tk.Frame(parent)\r\n        button_frame.grid(row=1, column=0, pady=20)\r\n        \r\n        ttk.Button(button_frame, text=\"➕ Add Coordinate\", command=self.add_coordinate, style='Primary.TButton').grid(row=0, column=0, padx=5)\r\n        ttk.Button(button_frame, text=\"✏️ Edit Selected\", command=self.edit_coordinate, style='Primary.TButton').grid(row=0, column=1, padx=5)\r\n        ttk.Button(button_frame, text=\"🗑️ Delete Selected\", command=self.delete_coordinate, style='Danger.TButton').grid(row=0, column=2, padx=5)\r\n        ttk.Button(button_frame, text=\"💾 Save Changes\", command=self.save_changes, style='Success.TButton').grid(row=0, column=3, padx=5)\r\n        \r\n        self.populate_editor()\r\n    \r\n    def setup_logs_tab(self):\r\n        \"\"\"Set up the logs tab\"\"\"\r\n        logs_tab = ttk.Frame(self.notebook)\r\n        self.notebook.add(logs_tab, text=\"📋 Logs\")\r\n        logs_tab.columnconfigure(0, weight=1)\r\n        logs_tab.rowconfigure(1, weight=1)\r\n        \r\n        # Header in logs tab with dark text\r\n        header_frame = ttk.Frame(logs_tab)\r\n        header_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=10, pady=10)\r\n        header_frame.columnconfigure(0, weight=1)\r\n        \r\n        tk.Label(header_frame, text=\"📋 Activity Logs\", font=(\"Segoe UI\", 16, \"bold\"),\r\n                bg=COLORS['light'], fg=COLORS['dark']).grid(row=0, column=0, sticky=tk.W)\r\n        ttk.Button(header_frame, text=\"Clear Logs\", command=self.clear_logs, style='Primary.TButton').grid(row=0, column=1)\r\n        \r\n        # Logs\r\n        logs_frame = ttk.Frame(logs_tab)\r\n        logs_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=10, pady=(0, 10))\r\n        logs_frame.columnconfigure(0, weight=1)\r\n        logs_frame.rowconfigure(0, weight=1)\r\n        \r\n        self.logs_text = tk.Text(logs_frame, wrap=tk.WORD, font=(\"Consolas\", 9), state=tk.DISABLED,\r\n                                bg='white', fg='#000000', insertbackground='black')\r\n        self.logs_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\r\n        \r\n        logs_scrollbar = ttk.Scrollbar(logs_frame, orient=\"vertical\", command=self.logs_text.yview)\r\n        logs_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))\r\n        self.logs_text.configure(yscrollcommand=logs_scrollbar.set)\r\n        \r\n        self.log_message(\"Application started\", \"INFO\")\r\n    \r\n    def start_auto_refresh(self):\r\n        \"\"\"Start automatic clipboard refresh every 10 seconds\"\"\"\r\n        def auto_refresh():\r\n            if self.auto_refresh_enabled:\r\n                self.refresh_clipboard()\r\n                # Schedule next refresh\r\n                self.clipboard_refresh_timer = self.root.after(10000, auto_refresh)  # 10 seconds\r\n        \r\n        # Start the first refresh after 10 seconds\r\n        self.clipboard_refresh_timer = self.root.after(10000, auto_refresh)\r\n    \r\n    def stop_auto_refresh(self):\r\n        \"\"\"Stop automatic clipboard refresh\"\"\"\r\n        self.auto_refresh_enabled = False\r\n        if self.clipboard_refresh_timer:\r\n            self.root.after_cancel(self.clipboard_refresh_timer)\r\n    \r\n    def toggle_auto_refresh(self):\r\n        \"\"\"Toggle automatic clipboard refresh on/off\"\"\"\r\n        if self.auto_refresh_enabled:\r\n            self.stop_auto_refresh()\r\n            self.auto_refresh_btn.config(text=\"⏰ Auto-Refresh: OFF\")\r\n            self.update_status(\"🔄 Auto-refresh disabled\", \"warning\")\r\n            self.log_message(\"Auto-refresh disabled\", \"INFO\")\r\n        else:\r\n            self.auto_refresh_enabled = True\r\n            self.start_auto_refresh()\r\n            self.auto_refresh_btn.config(text=\"⏰ Auto-Refresh: ON\")\r\n            self.update_status(\"🔄 Auto-refresh enabled (every 10s)\", \"success\")\r\n            self.log_message(\"Auto-refresh enabled\", \"INFO\")\r\n    \r\n    def populate_coordinates(self):\r\n        \"\"\"Populate main coordinates tree\"\"\"\r\n        for item in self.coords_tree.get_children():\r\n            self.coords_tree.delete(item)\r\n        \r\n        self.coords_tree.tag_configure('black_text', foreground='black')\r\n        \r\n        for coord in self.coordinates:\r\n            self.coords_tree.insert(\"\", \"end\", values=(\r\n                coord[\"name\"], coord[\"x\"], coord[\"y\"],\r\n                \"Yes\" if coord[\"press_enter_after_paste\"] else \"No\",\r\n                f\"{coord['delay_after_action']}s\"\r\n            ), tags=('black_text',))\r\n    \r\n    def populate_editor(self):\r\n        \"\"\"Populate editor tree\"\"\"\r\n        for item in self.editor_tree.get_children():\r\n            self.editor_tree.delete(item)\r\n        \r\n        self.editor_tree.tag_configure('black_text', foreground='black')\r\n\r\n        for coord in self.coordinates:\r\n            self.editor_tree.insert(\"\", \"end\", values=(\r\n                coord[\"name\"], coord[\"x\"], coord[\"y\"],\r\n                \"Yes\" if coord[\"press_enter_after_paste\"] else \"No\",\r\n                coord['delay_after_action']\r\n            ), tags=('black_text',))\r\n    \r\n    def add_coordinate(self):\r\n        \"\"\"Add new coordinate\"\"\"\r\n        self.edit_coordinate_dialog()\r\n    \r\n    def edit_coordinate(self):\r\n        \"\"\"Edit selected coordinate\"\"\"\r\n        selection = self.editor_tree.selection()\r\n        if not selection:\r\n            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to edit.\")\r\n            return\r\n        \r\n        index = self.editor_tree.index(selection[0])\r\n        self.edit_coordinate_dialog(index)\r\n    \r\n    def edit_coordinate_dialog(self, index=None):\r\n        \"\"\"Show coordinate edit dialog\"\"\"\r\n        dialog = tk.Toplevel(self.root)\r\n        dialog.title(\"Edit Coordinate\" if index is not None else \"Add Coordinate\")\r\n        dialog.geometry(\"400x320\")\r\n        dialog.transient(self.root)\r\n        dialog.grab_set()\r\n        dialog.configure(bg=COLORS['light'])\r\n\r\n        # Center dialog\r\n        dialog.update_idletasks()\r\n        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)\r\n        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)\r\n        dialog.geometry(f\"+{x}+{y}\")\r\n        \r\n        # Fields Frame\r\n        fields_frame = tk.Frame(dialog, bg=COLORS['light'])\r\n        fields_frame.pack(padx=20, pady=20, fill='both', expand=True)\r\n\r\n        # Fields\r\n        ttk.Label(fields_frame, text=\"Name:\", background=COLORS['light'], foreground=COLORS['dark']).grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)\r\n        name_var = tk.StringVar(value=self.coordinates[index][\"name\"] if index is not None else \"New Position\")\r\n        ttk.Entry(fields_frame, textvariable=name_var, width=30).grid(row=0, column=1, padx=10, pady=5)\r\n        \r\n        ttk.Label(fields_frame, text=\"X Coordinate:\", background=COLORS['light'], foreground=COLORS['dark']).grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)\r\n        x_var = tk.StringVar(value=str(self.coordinates[index][\"x\"]) if index is not None else \"100\")\r\n        ttk.Entry(fields_frame, textvariable=x_var, width=30).grid(row=1, column=1, padx=10, pady=5)\r\n        \r\n        ttk.Label(fields_frame, text=\"Y Coordinate:\", background=COLORS['light'], foreground=COLORS['dark']).grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)\r\n        y_var = tk.StringVar(value=str(self.coordinates[index][\"y\"]) if index is not None else \"100\")\r\n        ttk.Entry(fields_frame, textvariable=y_var, width=30).grid(row=2, column=1, padx=10, pady=5)\r\n        \r\n        ttk.Label(fields_frame, text=\"Press Enter:\", background=COLORS['light'], foreground=COLORS['dark']).grid(row=3, column=0, sticky=tk.W, padx=10, pady=5)\r\n        enter_var = tk.BooleanVar(value=self.coordinates[index][\"press_enter_after_paste\"] if index is not None else True)\r\n        ttk.Checkbutton(fields_frame, variable=enter_var).grid(row=3, column=1, sticky=tk.W, padx=10, pady=5)\r\n        \r\n        ttk.Label(fields_frame, text=\"Delay (sec):\", background=COLORS['light'], foreground=COLORS['dark']).grid(row=4, column=0, sticky=tk.W, padx=10, pady=5)\r\n        delay_var = tk.StringVar(value=str(self.coordinates[index][\"delay_after_action\"]) if index is not None else \"1.0\")\r\n        ttk.Entry(fields_frame, textvariable=delay_var, width=30).grid(row=4, column=1, padx=10, pady=5)\r\n        \r\n        # Get current mouse position button\r\n        def get_mouse_pos():\r\n            try:\r\n                dialog.withdraw()\r\n                result = messagebox.askokcancel(\"Get Position\", \r\n                    \"1. Position your mouse where you want to capture\\n\"\r\n                    \"2. Click OK\\n\" \r\n                    \"3. DO NOT move mouse for 3 seconds\\n\\n\"\r\n                    \"The position will be captured automatically.\")\r\n                \r\n                if result:\r\n                    time.sleep(3)\r\n                    x, y = pyautogui.position()\r\n                    x_var.set(str(x))\r\n                    y_var.set(str(y))\r\n                    dialog.deiconify()\r\n                    messagebox.showinfo(\"Success\", f\"Position captured: ({x}, {y})\")\r\n                else:\r\n                    dialog.deiconify()\r\n            except Exception as e:\r\n                dialog.deiconify()\r\n                messagebox.showerror(\"Error\", f\"Failed to capture position: {str(e)}\")\r\n        \r\n        ttk.Button(fields_frame, text=\"🎯 Get Current Mouse Position\", command=get_mouse_pos, style='Info.TButton').grid(row=5, column=0, columnspan=2, pady=10)\r\n        \r\n        # Buttons Frame\r\n        button_frame = tk.Frame(dialog, bg=COLORS['light'])\r\n        button_frame.pack(pady=10)\r\n\r\n        # Buttons\r\n        def save_coordinate():\r\n            try:\r\n                coord = {\r\n                    \"name\": name_var.get(),\r\n                    \"x\": int(x_var.get()),\r\n                    \"y\": int(y_var.get()),\r\n                    \"press_enter_after_paste\": enter_var.get(),\r\n                    \"delay_after_action\": float(delay_var.get())\r\n                }\r\n                \r\n                if index is not None:\r\n                    self.coordinates[index] = coord\r\n                else:\r\n                    self.coordinates.append(coord)\r\n                \r\n                self.populate_editor()\r\n                dialog.destroy()\r\n                \r\n            except ValueError:\r\n                messagebox.showerror(\"Invalid Input\", \"Please enter valid numbers for coordinates and delay.\")\r\n        \r\n        ttk.Button(button_frame, text=\"💾 Save\", command=save_coordinate, style='Success.TButton').grid(row=0, column=0, padx=5)\r\n        ttk.Button(button_frame, text=\"❌ Cancel\", command=dialog.destroy, style='Danger.TButton').grid(row=0, column=1, padx=5)\r\n    \r\n    def delete_coordinate(self):\r\n        \"\"\"Delete selected coordinate\"\"\"\r\n        selection = self.editor_tree.selection()\r\n        if not selection:\r\n            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to delete.\")\r\n            return\r\n        \r\n        if messagebox.askyesno(\"Confirm Delete\", \"Are you sure you want to delete this coordinate?\"):\r\n            index = self.editor_tree.index(selection[0])\r\n            del self.coordinates[index]\r\n            self.populate_editor()\r\n    \r\n    def save_changes(self):\r\n        \"\"\"Save all changes\"\"\"\r\n        self.save_coordinates()\r\n        self.populate_coordinates()\r\n        messagebox.showinfo(\"Saved\", \"Coordinates saved successfully!\")\r\n        self.log_message(\"Coordinates configuration saved\", \"INFO\")\r\n    \r\n    def on_coordinate_select(self, event):\r\n        \"\"\"Handle coordinate selection in main tab\"\"\"\r\n        selection = self.coords_tree.selection()\r\n        if selection:\r\n            index = self.coords_tree.index(selection[0])\r\n            coord = self.coordinates[index]\r\n            \r\n            # Update quick settings panel\r\n            self.selected_coord_label.config(text=f\"{coord['name']} (#{index+1})\")\r\n            self.quick_name_var.set(coord[\"name\"])\r\n            self.quick_x_var.set(str(coord[\"x\"]))\r\n            self.quick_y_var.set(str(coord[\"y\"]))\r\n            self.quick_enter_var.set(coord[\"press_enter_after_paste\"])\r\n            self.quick_delay_var.set(str(coord[\"delay_after_action\"]))\r\n        else:\r\n            self.selected_coord_label.config(text=\"None selected\")\r\n            self.quick_name_var.set(\"\")\r\n            self.quick_x_var.set(\"\")\r\n            self.quick_y_var.set(\"\")\r\n            self.quick_enter_var.set(False)\r\n            self.quick_delay_var.set(\"\")\r\n    \r\n    def quick_add_coordinate(self):\r\n        \"\"\"Quick add new coordinate\"\"\"\r\n        new_coord = {\r\n            \"name\": f\"Position {len(self.coordinates) + 1}\",\r\n            \"x\": 100,\r\n            \"y\": 100,\r\n            \"press_enter_after_paste\": True,\r\n            \"delay_after_action\": 1.0\r\n        }\r\n        self.coordinates.append(new_coord)\r\n        self.populate_coordinates()\r\n        self.save_coordinates()\r\n        # Select the new coordinate\r\n        children = self.coords_tree.get_children()\r\n        if children:\r\n            self.coords_tree.selection_set(children[-1])\r\n            self.coords_tree.focus(children[-1])\r\n        self.log_message(f\"Added new coordinate: {new_coord['name']}\", \"INFO\")\r\n    \r\n    def quick_edit_coordinate(self):\r\n        \"\"\"Quick edit selected coordinate\"\"\"\r\n        selection = self.coords_tree.selection()\r\n        if not selection:\r\n            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to edit.\")\r\n            return\r\n        \r\n        index = self.coords_tree.index(selection[0])\r\n        self.edit_coordinate_dialog(index)\r\n    \r\n    def quick_get_position(self):\r\n        \"\"\"Quick get mouse position for selected coordinate\"\"\"\r\n        def get_position():\r\n            try:\r\n                # Hide main window temporarily\r\n                self.root.withdraw()\r\n                \r\n                # Show instruction dialog\r\n                result = messagebox.askokcancel(\"Get Position\", \r\n                    \"1. Position your mouse where you want to capture\\n\"\r\n                    \"2. Click OK\\n\"\r\n                    \"3. DO NOT move mouse for 3 seconds\\n\\n\"\r\n                    \"The position will be captured automatically.\")\r\n                \r\n                if result:\r\n                    time.sleep(3)\r\n                    x, y = pyautogui.position()\r\n                    \r\n                    # Update the quick settings fields\r\n                    self.quick_x_var.set(str(x))\r\n                    self.quick_y_var.set(str(y))\r\n                    \r\n                    # Show main window again\r\n                    self.root.deiconify()\r\n                    self.root.lift()\r\n                    \r\n                    # Update status and log\r\n                    self.update_status(f\"✅ Position captured: ({x}, {y})\", \"success\")\r\n                    self.log_message(f\"Captured position: ({x}, {y})\", \"INFO\")\r\n                    \r\n                    # If a coordinate is selected, show message about updating\r\n                    selection = self.coords_tree.selection()\r\n                    if selection:\r\n                        messagebox.showinfo(\"Position Captured\", \r\n                            f\"Position ({x}, {y}) captured!\\n\\n\"\r\n                            \"Click 'Update Selected' to save this position to the selected coordinate.\")\r\n                    else:\r\n                        messagebox.showinfo(\"Position Captured\", \r\n                            f\"Position ({x}, {y}) captured!\\n\\n\"\r\n                            \"You can now use 'Add' to create a new coordinate with this position.\")\r\n                else:\r\n                    # Show main window again if cancelled\r\n                    self.root.deiconify()\r\n                    self.root.lift()\r\n                    \r\n            except Exception as e:\r\n                # Make sure window is shown again\r\n                self.root.deiconify()\r\n                self.root.lift()\r\n                messagebox.showerror(\"Error\", f\"Failed to capture position: {str(e)}\")\r\n                self.log_message(f\"Position capture error: {str(e)}\", \"ERROR\")\r\n        \r\n        # Run in thread to avoid blocking\r\n        thread = threading.Thread(target=get_position)\r\n        thread.daemon = True\r\n        thread.start()\r\n    \r\n    def quick_delete_coordinate(self):\r\n        \"\"\"Quick delete selected coordinate\"\"\"\r\n        selection = self.coords_tree.selection()\r\n        if not selection:\r\n            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to delete.\")\r\n            return\r\n        \r\n        index = self.coords_tree.index(selection[0])\r\n        coord_name = self.coordinates[index][\"name\"]\r\n        \r\n        if messagebox.askyesno(\"Confirm Delete\", f\"Delete '{coord_name}'?\"):\r\n            del self.coordinates[index]\r\n            self.populate_coordinates()\r\n            self.save_coordinates()\r\n            self.log_message(f\"Deleted coordinate: {coord_name}\", \"INFO\")\r\n            \r\n            # Clear quick settings\r\n            self.selected_coord_label.config(text=\"None selected\")\r\n            self.quick_name_var.set(\"\")\r\n            self.quick_x_var.set(\"\")\r\n            self.quick_y_var.set(\"\")\r\n            self.quick_enter_var.set(False)\r\n            self.quick_delay_var.set(\"\")\r\n    \r\n    def update_selected_coordinate(self):\r\n        \"\"\"Update the selected coordinate with quick settings values\"\"\"\r\n        selection = self.coords_tree.selection()\r\n        if not selection:\r\n            messagebox.showwarning(\"No Selection\", \"Please select a coordinate to update.\")\r\n            return\r\n        \r\n        try:\r\n            index = self.coords_tree.index(selection[0])\r\n            \r\n            # Validate inputs\r\n            name = self.quick_name_var.get().strip()\r\n            x = int(self.quick_x_var.get())\r\n            y = int(self.quick_y_var.get())\r\n            delay = float(self.quick_delay_var.get())\r\n            \r\n            if not name:\r\n                messagebox.showerror(\"Invalid Input\", \"Name cannot be empty.\")\r\n                return\r\n            \r\n            # Update coordinate\r\n            self.coordinates[index] = {\r\n                \"name\": name,\r\n                \"x\": x,\r\n                \"y\": y,\r\n                \"press_enter_after_paste\": self.quick_enter_var.get(),\r\n                \"delay_after_action\": delay\r\n            }\r\n            \r\n            self.populate_coordinates()\r\n            self.save_coordinates()\r\n            \r\n            # Re-select the updated coordinate\r\n            children = self.coords_tree.get_children()\r\n            if index < len(children):\r\n                self.coords_tree.selection_set(children[index])\r\n                self.coords_tree.focus(children[index])\r\n            \r\n            self.update_status(f\"✅ Updated '{name}'\", \"success\")\r\n            self.log_message(f\"Updated coordinate: {name} at ({x}, {y})\", \"INFO\")\r\n            \r\n        except ValueError as e:\r\n            messagebox.showerror(\"Invalid Input\", \"Please enter valid numbers for coordinates and delay.\")\r\n        except Exception as e:\r\n            messagebox.showerror(\"Error\", f\"Failed to update coordinate: {str(e)}\")\r\n    \r\n    def refresh_clipboard(self):\r\n        \"\"\"Refresh clipboard display\"\"\"\r\n        try:\r\n            clipboard_content = pyperclip.paste()\r\n            self.clipboard_text.config(state='normal')\r\n            self.clipboard_text.delete(1.0, tk.END)\r\n            \r\n            # Add timestamp and content\r\n            import datetime\r\n            timestamp = datetime.datetime.now().strftime(\"%H:%M:%S\")\r\n            header = f\"🕒 Last updated: {timestamp}\\n\" + \"=\"*50 + \"\\n\"\r\n            \r\n            self.clipboard_text.insert(1.0, header + clipboard_content)\r\n            # Ensure text is black\r\n            self.clipboard_text.tag_add(\"black_text\", \"1.0\", tk.END)\r\n            self.clipboard_text.config(state='disabled', fg='#000000')\r\n            \r\n            # Show success message briefly\r\n            self.update_status(\"✅ Clipboard refreshed automatically\", \"success\")\r\n            self.log_message(f\"Clipboard refreshed - {len(clipboard_content)} characters\", \"INFO\")\r\n        except Exception as e:\r\n            self.update_status(f\"❌ Clipboard Error: {str(e)}\", \"error\")\r\n            self.log_message(f\"Clipboard refresh error: {str(e)}\", \"ERROR\")\r\n    \r\n    def update_status(self, message, status_type=\"info\"):\r\n        \"\"\"Update status with colors\"\"\"\r\n        colors = {'success': COLORS['success'], 'error': COLORS['danger'], 'warning': COLORS['warning'], 'info': COLORS['info']}\r\n        color = colors.get(status_type, COLORS['secondary'])\r\n        self.status_container.config(bg=color)\r\n        self.status_label.config(text=message, bg=color, fg=COLORS['dark'])\r\n    \r\n    def log_message(self, message, level=\"INFO\"):\r\n        \"\"\"Add message to logs\"\"\"\r\n        import datetime\r\n        timestamp = datetime.datetime.now().strftime(\"%H:%M:%S\")\r\n        log_entry = f\"[{timestamp}] {level}: {message}\\n\"\r\n        \r\n        # Only log if logs_text widget exists (logs tab has been created)\r\n        if hasattr(self, 'logs_text') and self.logs_text:\r\n            self.logs_text.config(state=tk.NORMAL)\r\n            self.logs_text.insert(tk.END, log_entry)\r\n            self.logs_text.see(tk.END)\r\n            self.logs_text.config(state=tk.DISABLED)\r\n    \r\n    def clear_logs(self):\r\n        \"\"\"Clear all logs\"\"\"\r\n        self.logs_text.config(state=tk.NORMAL)\r\n        self.logs_text.delete(1.0, tk.END)\r\n        self.logs_text.config(state=tk.DISABLED)\r\n        self.log_message(\"Logs cleared\", \"INFO\")\r\n    \r\n    def submit_action(self):\r\n        \"\"\"Start the sequence\"\"\"\r\n        if self.is_running:\r\n            return\r\n        \r\n        try:\r\n            clipboard_content = pyperclip.paste().strip()\r\n            if not clipboard_content:\r\n                messagebox.showwarning(\"Empty Clipboard\", \"Please copy some text first.\")\r\n                return\r\n        except Exception as e:\r\n            messagebox.showerror(\"Clipboard Error\", f\"Error: {str(e)}\")\r\n            return\r\n        \r\n        self.is_running = True\r\n        self.submit_btn.config(state=\"disabled\")\r\n        self.stop_btn.config(state=\"normal\")\r\n        self.start_time = time.time()\r\n        self.completed_count = 0\r\n        \r\n        self.log_message(f\"Starting sequence with {len(self.coordinates)} coordinates\", \"INFO\")\r\n        \r\n        self.current_thread = threading.Thread(target=self.execute_sequence)\r\n        self.current_thread.daemon = True\r\n        self.current_thread.start()\r\n    \r\n    def stop_action(self):\r\n        \"\"\"Stop the sequence\"\"\"\r\n        self.is_running = False\r\n        self.submit_btn.config(state=\"normal\")\r\n        self.stop_btn.config(state=\"disabled\")\r\n        self.update_status(\"🛑 Sequence stopped\", \"warning\")\r\n        self.log_message(\"Sequence stopped by user\", \"WARNING\")\r\n    \r\n    def execute_sequence(self):\r\n        \"\"\"Execute the pasting sequence\"\"\"\r\n        try:\r\n            total_coords = len(self.coordinates)\r\n            self.progress.config(maximum=total_coords)\r\n            \r\n            # Initial delay\r\n            for i in range(3, 0, -1):\r\n                if not self.is_running:\r\n                    return\r\n                self.update_status(f\"⏳ Starting in {i} seconds...\", \"warning\")\r\n                time.sleep(1)\r\n            \r\n            # Process each coordinate\r\n            for index, coord in enumerate(self.coordinates):\r\n                if not self.is_running:\r\n                    return\r\n                \r\n                self.update_status(f\"🔄 Processing {coord['name']} ({index+1}/{total_coords})\", \"info\")\r\n                self.log_message(f\"Processing {coord['name']} at ({coord['x']}, {coord['y']})\", \"INFO\")\r\n                \r\n                # Move and click\r\n                pyautogui.moveTo(coord[\"x\"], coord[\"y\"], duration=0.5)\r\n                pyautogui.click(coord[\"x\"], coord[\"y\"])\r\n                time.sleep(0.2)\r\n                \r\n                # Paste\r\n                pyautogui.hotkey('ctrl', 'v')\r\n                \r\n                # Press Enter if configured\r\n                if coord[\"press_enter_after_paste\"]:\r\n                    time.sleep(0.1)\r\n                    pyautogui.press('enter')\r\n                    self.log_message(f\"Pressed Enter after pasting at {coord['name']}\", \"DEBUG\")\r\n                \r\n                self.completed_count += 1\r\n                self.progress.config(value=index + 1)\r\n                self.log_message(f\"Completed {coord['name']}\", \"SUCCESS\")\r\n                \r\n                # Wait before next\r\n                if index < total_coords - 1:\r\n                    delay = coord[\"delay_after_action\"]\r\n                    for i in range(int(delay * 10)):\r\n                        if not self.is_running:\r\n                            return\r\n                        time.sleep(0.1)\r\n            \r\n            if self.is_running:\r\n                total_time = int(time.time() - self.start_time)\r\n                self.update_status(f\"✅ Completed! {total_coords} locations in {total_time}s\", \"success\")\r\n                self.log_message(f\"Sequence completed in {total_time} seconds\", \"SUCCESS\")\r\n        \r\n        except Exception as e:\r\n            self.update_status(f\"❌ Error: {str(e)}\", \"error\")\r\n            self.log_message(f\"Error: {str(e)}\", \"ERROR\")\r\n        \r\n        finally:\r\n            self.is_running = False\r\n            self.submit_btn.config(state=\"normal\")\r\n            self.stop_btn.config(state=\"disabled\")\r\n\r\ndef main():\r\n    pyautogui.FAILSAFE = True\r\n    pyautogui.PAUSE = 0.05\r\n    \r\n    root = tk.Tk()\r\n    app = MultiCoordinatesClicker(root)\r\n    \r\n    # Center window\r\n    root.update_idletasks()\r\n    x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)\r\n    y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)\r\n    root.geometry(f\"+{x}+{y}\")\r\n    \r\n    # Handle window close event\r\n    def on_closing():\r\n        app.stop_auto_refresh()\r\n        root.destroy()\r\n    \r\n    root.protocol(\"WM_DELETE_WINDOW\", on_closing)\r\n    root.mainloop()\r\n\r\nif __name__ == \"__main__\":\r\n    main() "
        }
    ]
}